{"file_contents":{"README.md":{"content":"# CyberCrime\nSistema de gestion de datos de delistos informaticos diseÃ±ado para gestionar los caso y ayudar con la investigacions  a traves de tecnicas especializadas de osint\n","size_bytes":177},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Cyber Crime Management System\n\n## Overview\n\nThis is a full-stack web application designed for managing cyber crime cases and data. Its primary purpose is to provide a dashboard interface for tracking various cyber crimes, including hacking, phishing, malware, and ransomware. Key capabilities include comprehensive case management with detailed tracking of stolen amounts, investigation statuses, and advanced data filtering and visualization. The system is built as a secure data management platform featuring user authentication, role-based access, and robust cyber crime case tracking functionality.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language (Spanish).\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript (Vite build tool)\n- **UI Library**: shadcn/ui (built on Radix UI primitives)\n- **Styling**: Tailwind CSS with custom design system variables\n- **State Management**: TanStack React Query\n- **Routing**: Wouter\n- **Forms**: React Hook Form with Zod validation\n- **UI/UX Decisions**: Applied a complete dark \"hacker-style\" aesthetic with custom CSS variables, monospace fonts (JetBrains Mono, Fira Code), neon border effects, and matrix-style text effects. The interface maintains a Spanish language with uppercase hacker-style labels. Includes dynamic configuration options for color themes, transparency, font size, and visual effects, with real-time preview and persistence.\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM\n- **API Design**: RESTful API with JSON responses\n- **Session Management**: Express sessions with PostgreSQL storage\n- **Authentication**: Replit Auth integration with OpenID Connect\n\n### Data Storage\n- **Database**: PostgreSQL (Neon serverless driver)\n- **Schema Management**: Drizzle Kit\n- **Session Storage**: PostgreSQL-backed session store\n- **Data Models**: Cyber crime cases, users, sessions, and user_settings with proper relationships.\n\n### Authentication & Authorization\n- **Provider**: Replit Auth (OpenID Connect)\n- **Session Management**: Server-side sessions with secure cookies\n- **Authorization**: Route-level protection with user context middleware\n- **User Management**: Automatic user creation/update on authentication, and user-specific settings persistence in the database.\n\n### Key Design Patterns\n- **Monorepo Structure**: Shared types and schemas between frontend and backend.\n- **Type Safety**: End-to-end TypeScript with Zod schema validation.\n- **Component Architecture**: Modular UI components with separation of concerns.\n- **Error Handling**: Centralized error handling.\n- **Responsive Design**: Mobile-first approach.\n\n### Feature Specifications\n- **Case Management**: Detailed tracking, filtering, and visualization of cyber crime cases.\n- **System Configuration**: Customizable UI settings (color theme, transparency, fonts, visual effects).\n- **AI Assistant (Asistente IA)**: AI-powered chatbot specialized in cybercrime investigation (rule-based, Spanish language).\n- **Intelligence (Inteligencia)**: Advanced search system for cybercrime research with multiple search modes and export functionality.\n- **Administrative Sections**: User management, report generation, and chatbot configuration.\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon Database**: Serverless PostgreSQL database hosting.\n- **Replit Auth**: Authentication service with OpenID Connect integration.\n\n### Frontend Dependencies\n- **React Ecosystem**: React 18+ with TypeScript.\n- **UI Framework**: Radix UI primitives.\n- **Styling**: Tailwind CSS.\n- **Data Fetching**: TanStack React Query.\n- **Form Handling**: React Hook Form.\n\n### Backend Dependencies\n- **Express.js**: Web application framework.\n- **Drizzle ORM**: TypeScript ORM.\n- **Passport.js**: Authentication middleware.\n- **Session Management**: Express-session with PostgreSQL store.\n\n### Development Tools\n- **Build Tools**: Vite (frontend), esbuild (backend).\n- **Type Checking**: TypeScript compiler.\n- **Database Tools**: Drizzle Kit.","size_bytes":4115},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2770},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n\n","size_bytes":531},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n// Trust first proxy for correct IP detection\napp.set('trust proxy', true);\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    // Check if response headers have already been sent\n    if (!res.headersSent) {\n      res.status(status).json({ message });\n    }\n    \n    // Log the error instead of throwing it to prevent app crash\n    console.error('Error handled:', err);\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2331},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertCyberCaseSchema, insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport crypto from \"crypto\";\n\n// Helper function to parse user agent with better device detection\nfunction parseUserAgent(userAgent: string) {\n  let browser = 'Desconocido';\n  let os = 'Desconocido';\n  let deviceType = 'PC';\n  \n  // Detectar tipo de dispositivo primero\n  const mobileRegex = /Mobile|Android|iPhone|iPod|BlackBerry|Windows Phone|Opera Mini/i;\n  const tabletRegex = /iPad|Tablet|PlayBook|Silk|Kindle/i;\n  \n  if (tabletRegex.test(userAgent)) {\n    deviceType = 'Tablet';\n  } else if (mobileRegex.test(userAgent)) {\n    deviceType = 'MÃ³vil';\n  }\n  \n  // Parse browser con mejor detecciÃ³n\n  if (userAgent.includes('Edg/')) browser = 'Edge';\n  else if (userAgent.includes('Chrome') && !userAgent.includes('Edg/')) browser = 'Chrome';\n  else if (userAgent.includes('Firefox')) browser = 'Firefox';\n  else if (userAgent.includes('Safari') && !userAgent.includes('Chrome')) browser = 'Safari';\n  else if (userAgent.includes('Opera')) browser = 'Opera';\n  \n  // Parse OS con mejor detecciÃ³n\n  if (userAgent.includes('Windows NT')) os = 'Windows';\n  else if (userAgent.includes('Mac OS X') || userAgent.includes('macOS')) os = 'macOS';\n  else if (userAgent.includes('iPhone OS') || userAgent.includes('iOS')) os = 'iOS';\n  else if (userAgent.includes('Android')) os = 'Android';\n  else if (userAgent.includes('Linux') && !userAgent.includes('Android')) os = 'Linux';\n  else if (userAgent.includes('Ubuntu')) os = 'Ubuntu';\n  else if (userAgent.includes('CrOS')) os = 'Chrome OS';\n  \n  return { browser, os, deviceType };\n}\n\n// Hash password function (simple for demo - use bcrypt in production)\nfunction hashPassword(password: string): string {\n  return crypto.createHash('sha256').update(password).digest('hex');\n}\n\n// Simple auth middleware\nconst isAuthenticated = (req: any, res: any, next: any) => {\n  if (req.session?.userId) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session setup\n  app.set(\"trust proxy\", 1);\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  app.use(session({\n    secret: process.env.SESSION_SECRET || \"cyber-crime-secret\",\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: sessionTtl,\n    },\n  }));\n\n  // Initialize default users if not exist\n  async function initializeDefaultUsers() {\n    try {\n      const defaultUsers = [\n        {\n          username: \"admin\",\n          email: \"admin@cybercrime.com\",\n          password: \"admin123\",\n          firstName: \"Administrador\",\n          lastName: \"Sistema\",\n          role: \"admin\" as const,\n          isActive: \"true\" as const\n        },\n        {\n          username: \"maria.gonzalez\",\n          email: \"maria.gonzalez@cybercrime.com\",\n          password: \"investigador123\",\n          firstName: \"MarÃ­a\",\n          lastName: \"GonzÃ¡lez\",\n          role: \"investigator\" as const,\n          isActive: \"true\" as const\n        },\n        {\n          username: \"carlos.rodriguez\",\n          email: \"carlos.rodriguez@cybercrime.com\", \n          password: \"analista123\",\n          firstName: \"Carlos\",\n          lastName: \"RodrÃ­guez\",\n          role: \"user\" as const,\n          isActive: \"true\" as const\n        },\n        {\n          username: \"ana.martinez\",\n          email: \"ana.martinez@cybercrime.com\",\n          password: \"auditor123\", \n          firstName: \"Ana\",\n          lastName: \"MartÃ­nez\",\n          role: \"auditor\" as const,\n          isActive: \"true\" as const\n        },\n        {\n          username: \"jose.lopez\",\n          email: \"jose.lopez@cybercrime.com\",\n          password: \"investigador123\",\n          firstName: \"JosÃ©\",\n          lastName: \"LÃ³pez\", \n          role: \"investigator\" as const,\n          isActive: \"false\" as const\n        }\n      ];\n\n      for (const userData of defaultUsers) {\n        const existingUser = await storage.getUserByUsername(userData.username);\n        if (!existingUser) {\n          await storage.createUser({\n            ...userData,\n            password: hashPassword(userData.password)\n          });\n          console.log(`Usuario ${userData.username} creado exitosamente`);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error creating default users:\", error);\n    }\n  }\n\n  // Initialize default users\n  await initializeDefaultUsers();\n\n  // Login route with session tracking\n  app.post('/api/login', async (req: any, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      const user = await storage.getUserByUsername(username);\n      if (!user || hashPassword(password) !== user.password || user.isActive !== \"true\") {\n        return res.status(401).json({ message: \"Credenciales invÃ¡lidas\" });\n      }\n\n      // Update last login\n      await storage.updateUser(user.id, { lastLoginAt: new Date() });\n\n      // Create session record\n      const sessionId = req.sessionID || crypto.randomUUID();\n      const userAgent = req.headers['user-agent'] || '';\n      const { browser, os, deviceType } = parseUserAgent(userAgent);\n      // Get real IP address considering proxies\n      let ipAddress = req.headers['x-forwarded-for']?.split(',')[0]?.trim() || \n                     req.headers['x-real-ip'] || \n                     req.ip || \n                     req.connection.remoteAddress || \n                     req.socket.remoteAddress ||\n                     'unknown';\n      \n      // Clean up IPv6 loopback and map to IPv4\n      if (ipAddress === '::1' || ipAddress === '::ffff:127.0.0.1') {\n        ipAddress = '127.0.0.1';\n      }\n      // Remove IPv6 mapping prefix if present\n      if (ipAddress.startsWith('::ffff:')) {\n        ipAddress = ipAddress.substring(7);\n      }\n\n      await storage.createUserSession({\n        userId: user.id,\n        sessionId,\n        ipAddress,\n        userAgent,\n        deviceInfo: `${deviceType} - ${browser}`,\n        browser,\n        os,\n        location: 'No disponible', // Could integrate with IP geolocation service\n        isActive: \"true\"\n      });\n\n      req.session.userId = user.id;\n      req.session.user = {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n      };\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Logout handler function\n  const handleLogout = async (req: any, res: any) => {\n    try {\n      const sessionId = req.sessionID;\n      if (sessionId) {\n        await storage.updateSessionLogout(sessionId);\n      }\n      \n      req.session.destroy((err: any) => {\n        if (err) {\n          return res.status(500).json({ message: \"No se pudo cerrar sesiÃ³n\" });\n        }\n        res.json({ success: true });\n      });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  };\n\n  // Support both GET and POST for logout\n  app.post('/api/logout', handleLogout);\n  app.get('/api/logout', handleLogout);\n\n  // Auth routes\n  app.get(\"/api/auth/user\", isAuthenticated, async (req: any, res) => {\n    try {\n      res.json(req.session.user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User settings routes\n  app.get(\"/api/user/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.session?.userId || \"admin\";\n      const settings = await storage.getUserSettings(userId);\n      \n      // Return default settings if none exist\n      if (!settings) {\n        const defaultSettings = {\n          primaryColor: \"green\",\n          secondaryColor: \"gray\",\n          transparency: \"85\",\n          neonEffects: \"false\",\n          fontSize: \"14\",\n          animations: \"false\"\n        };\n        res.json(defaultSettings);\n      } else {\n        res.json({\n          primaryColor: settings.primaryColor,\n          secondaryColor: settings.secondaryColor || \"gray\",\n          transparency: settings.transparency,\n          neonEffects: settings.neonEffects,\n          fontSize: settings.fontSize,\n          animations: settings.animations\n        });\n      }\n    } catch (error) {\n      console.error(\"Error fetching user settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch user settings\" });\n    }\n  });\n\n  app.post(\"/api/user/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.session?.userId || \"admin\";\n      const { primaryColor, secondaryColor, transparency, neonEffects, fontSize, animations } = req.body;\n      \n      const settings = await storage.upsertUserSettings(userId, {\n        primaryColor: primaryColor || \"green\",\n        secondaryColor: secondaryColor || \"gray\",\n        transparency: transparency?.toString() || \"85\",\n        neonEffects: neonEffects?.toString() || \"false\",\n        fontSize: fontSize?.toString() || \"14\",\n        animations: animations?.toString() || \"false\"\n      });\n      \n      res.json({\n        primaryColor: settings.primaryColor,\n        secondaryColor: settings.secondaryColor,\n        transparency: settings.transparency,\n        neonEffects: settings.neonEffects,\n        fontSize: settings.fontSize,\n        animations: settings.animations\n      });\n    } catch (error) {\n      console.error(\"Error saving user settings:\", error);\n      res.status(500).json({ message: \"Failed to save user settings\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.session?.userId || \"admin\";\n      const stats = await storage.getDashboardStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Cyber cases routes\n  app.get(\"/api/cyber-cases\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { page, limit, search, crimeType, dateFrom, dateTo } = req.query;\n      const result = await storage.getCyberCases({\n        page: page ? parseInt(page) : 1,\n        limit: limit ? parseInt(limit) : 10,\n        search: search || \"\",\n        crimeType: crimeType || \"\",\n        dateFrom: dateFrom || \"\",\n        dateTo: dateTo || \"\",\n      });\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching cyber cases:\", error);\n      res.status(500).json({ message: \"Failed to fetch cyber cases\" });\n    }\n  });\n\n  app.get(\"/api/cyber-cases/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const cyberCase = await storage.getCyberCase(id);\n      if (!cyberCase) {\n        return res.status(404).json({ message: \"Cyber case not found\" });\n      }\n      res.json(cyberCase);\n    } catch (error) {\n      console.error(\"Error fetching cyber case:\", error);\n      res.status(500).json({ message: \"Failed to fetch cyber case\" });\n    }\n  });\n\n  app.post(\"/api/cyber-cases\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.session?.userId || \"admin\";\n      const validatedData = insertCyberCaseSchema.parse(req.body);\n      const cyberCase = await storage.createCyberCase(validatedData, userId);\n      res.status(201).json(cyberCase);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error creating cyber case:\", error);\n      res.status(500).json({ message: \"Failed to create cyber case\" });\n    }\n  });\n\n  app.put(\"/api/cyber-cases/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.session?.userId || \"admin\";\n      const validatedData = insertCyberCaseSchema.partial().parse(req.body);\n      const cyberCase = await storage.updateCyberCase(id, validatedData, userId);\n      res.json(cyberCase);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      console.error(\"Error updating cyber case:\", error);\n      res.status(500).json({ message: \"Failed to update cyber case\" });\n    }\n  });\n\n  app.delete(\"/api/cyber-cases/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.session?.userId || \"admin\";\n      await storage.deleteCyberCase(id, userId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting cyber case:\", error);\n      res.status(500).json({ message: \"Failed to delete cyber case\" });\n    }\n  });\n\n  // Intelligence search endpoint\n  app.post('/api/intelligence/search', isAuthenticated, async (req: any, res) => {\n    try {\n      const { query } = req.body;\n      \n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ message: 'Query is required' });\n      }\n      \n      // For now, return mock search results until we implement a real search service\n      const mockResults = [\n        {\n          title: `InformaciÃ³n sobre: ${query}`,\n          url: `https://example.com/search?q=${encodeURIComponent(query)}`,\n          description: `Resultados relacionados con ${query}. Esta es una implementaciÃ³n temporal que muestra cÃ³mo funcionarÃ¡ la bÃºsqueda inteligente.`,\n          citations: ['https://cybersecurity.org', 'https://cert.gov']\n        },\n        {\n          title: `GuÃ­as de investigaciÃ³n: ${query}`,\n          url: `https://investigacion-cyber.com/${query.toLowerCase()}`,\n          description: `MetodologÃ­as y tÃ©cnicas para investigar casos relacionados con ${query}. Incluye mejores prÃ¡cticas y herramientas recomendadas.`,\n          citations: ['https://forensics.org']\n        }\n      ];\n      \n      res.json({ results: mockResults });\n    } catch (error) {\n      console.error('Intelligence search error:', error);\n      res.status(500).json({ message: 'Error en la bÃºsqueda' });\n    }\n  });\n  \n  // User management endpoints\n  app.get('/api/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      // Get current session info for each user\n      const usersWithSessions = await Promise.all(\n        users.map(async (user) => {\n          const { password, ...safeUser } = user;\n          // Get the most recent active session for this user\n          const userSessions = await storage.getUserSessions(user.id);\n          const currentSession = userSessions.find(session => session.isActive === \"true\");\n          \n          return {\n            ...safeUser,\n            currentSession: currentSession ? {\n              ipAddress: currentSession.ipAddress,\n              deviceInfo: currentSession.deviceInfo,\n              browser: currentSession.browser,\n              os: currentSession.os\n            } : null\n          };\n        })\n      );\n      \n      res.json(usersWithSessions);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      res.status(500).json({ message: 'Error al obtener usuarios' });\n    }\n  });\n\n  app.post('/api/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      // Hash password before storing\n      const hashedPassword = hashPassword(userData.password);\n      const newUser = await storage.createUser({\n        ...userData,\n        password: hashedPassword\n      });\n      // Remove password from response\n      const { password, ...safeUser } = newUser;\n      res.json(safeUser);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Error de validaciÃ³n\", errors: error.errors });\n      }\n      console.error('Error creating user:', error);\n      res.status(500).json({ message: 'Error al crear usuario' });\n    }\n  });\n\n  app.put('/api/users/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userData = insertUserSchema.partial().parse(req.body);\n      // Hash password if provided\n      if (userData.password) {\n        userData.password = hashPassword(userData.password);\n      }\n      const updatedUser = await storage.updateUser(id, userData);\n      // Remove password from response\n      const { password, ...safeUser } = updatedUser;\n      res.json(safeUser);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Error de validaciÃ³n\", errors: error.errors });\n      }\n      console.error('Error updating user:', error);\n      res.status(500).json({ message: 'Error al actualizar usuario' });\n    }\n  });\n\n  app.delete('/api/users/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteUser(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      res.status(500).json({ message: 'Error al eliminar usuario' });\n    }\n  });\n\n  // User sessions endpoints\n  app.get('/api/sessions', isAuthenticated, async (req: any, res) => {\n    try {\n      const sessions = await storage.getAllActiveSessions();\n      res.json(sessions);\n    } catch (error) {\n      console.error('Error fetching sessions:', error);\n      res.status(500).json({ message: 'Error al obtener sesiones' });\n    }\n  });\n\n  app.get('/api/users/:id/sessions', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const sessions = await storage.getUserSessions(id);\n      res.json(sessions);\n    } catch (error) {\n      console.error('Error fetching user sessions:', error);\n      res.status(500).json({ message: 'Error al obtener sesiones del usuario' });\n    }\n  });\n\n  // Chatbot endpoint\n  app.post('/api/chatbot/message', isAuthenticated, async (req: any, res) => {\n    try {\n      const { message } = req.body;\n      \n      if (!message || typeof message !== 'string') {\n        return res.status(400).json({ message: 'Message is required' });\n      }\n      \n      // Simple rule-based chatbot responses for cyber crime topics\n      let response = '';\n      const lowerMessage = message.toLowerCase();\n      \n      if (lowerMessage.includes('phishing') || lowerMessage.includes('suplantaciÃ³n')) {\n        response = 'El phishing es una tÃ©cnica de ingenierÃ­a social donde los atacantes se hacen pasar por entidades confiables para obtener informaciÃ³n sensible. Para investigar casos de phishing:\\n\\n1. Analiza los headers del correo electrÃ³nico\\n2. Verifica el dominio remitente\\n3. Examina los enlaces y archivos adjuntos\\n4. Documenta las cuentas bancarias involucradas\\n\\nÂ¿Necesitas ayuda con algÃºn aspecto especÃ­fico del anÃ¡lisis de phishing?';\n      } else if (lowerMessage.includes('malware') || lowerMessage.includes('virus')) {\n        response = 'Para casos de malware en delitos informÃ¡ticos:\\n\\n1. AÃ­sla el sistema infectado\\n2. Captura evidencia forense antes de la limpieza\\n3. Analiza los hashes de archivos sospechosos\\n4. Documenta la cadena de infecciÃ³n\\n5. Identifica sistemas comprometidos\\n\\nÂ¿QuÃ© tipo de malware estÃ¡s investigando? (ransomware, trojan bancario, spyware, etc.)';\n      } else if (lowerMessage.includes('criptomoneda') || lowerMessage.includes('bitcoin') || lowerMessage.includes('blockchain')) {\n        response = 'Para investigaciones con criptomonedas:\\n\\n1. Rastrea las direcciones de wallet involucradas\\n2. Usa herramientas de anÃ¡lisis blockchain (Chainalysis, Crystal)\\n3. Identifica exchanges utilizados\\n4. Documenta transacciones sospechosas\\n5. Colabora con exchanges para obtener informaciÃ³n KYC\\n\\nÂ¿Tienes direcciones de wallet especÃ­ficas para analizar?';\n      } else if (lowerMessage.includes('fraude') || lowerMessage.includes('estafa')) {\n        response = 'Para casos de fraude informÃ¡tico:\\n\\n1. Documenta el modus operandi del atacante\\n2. Recopila evidencia de comunicaciones\\n3. Analiza flujos financieros\\n4. Identifica vÃ­ctimas adicionales\\n5. Coordina con entidades financieras\\n\\nÂ¿QuÃ© tipo de fraude estÃ¡s investigando? (SIM swapping, business email compromise, romance scam, etc.)';\n      } else if (lowerMessage.includes('forensic') || lowerMessage.includes('evidencia')) {\n        response = 'Para anÃ¡lisis forense digital:\\n\\n1. MantÃ©n la cadena de custodia\\n2. Crea imÃ¡genes bit a bit de dispositivos\\n3. Usa herramientas certificadas (EnCase, FTK, Autopsy)\\n4. Documenta todos los procedimientos\\n5. Preserva metadatos originales\\n\\nÂ¿QuÃ© tipo de dispositivo necesitas analizar?';\n      } else {\n        response = `Hola, soy tu asistente especializado en delitos informÃ¡ticos. He recibido tu consulta sobre \"${message}\".\\n\\nPuedo ayudarte con:\\nâ¢ AnÃ¡lisis de phishing y fraudes\\nâ¢ InvestigaciÃ³n de malware\\nâ¢ Rastreo de criptomonedas\\nâ¢ AnÃ¡lisis forense digital\\nâ¢ TÃ©cnicas de investigaciÃ³n\\nâ¢ Normativas legales\\n\\nÂ¿PodrÃ­as ser mÃ¡s especÃ­fico sobre quÃ© aspecto necesitas que te ayude?`;\n      }\n      \n      res.json({ response });\n    } catch (error) {\n      console.error('Chatbot error:', error);\n      res.status(500).json({ message: 'Error en el chatbot' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":22118},"server/storage.ts":{"content":"import {\n  users,\n  cyberCases,\n  userSettings,\n  userSessions,\n  type User,\n  type UpsertUser,\n  type CyberCase,\n  type InsertCyberCase,\n  type UserSettings,\n  type InsertUserSettings,\n  type UserSession,\n  type InsertUserSession,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, ilike, and, gte, lte, count, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: Omit<UpsertUser, 'id'>): Promise<User>;\n  updateUser(id: string, user: Partial<UpsertUser>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  getAllUsers(): Promise<User[]>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // User session operations\n  createUserSession(session: Omit<InsertUserSession, 'id'>): Promise<UserSession>;\n  getUserSessions(userId: string): Promise<UserSession[]>;\n  getAllActiveSessions(): Promise<(UserSession & { user: User })[]>;\n  updateSessionLogout(sessionId: string): Promise<void>;\n\n  // User settings operations\n  getUserSettings(userId: string): Promise<UserSettings | undefined>;\n  upsertUserSettings(userId: string, settings: Partial<InsertUserSettings>): Promise<UserSettings>;\n\n  // Cyber case operations\n  getCyberCases(params: {\n    page?: number;\n    limit?: number;\n    search?: string;\n    crimeType?: string;\n    dateFrom?: string;\n    dateTo?: string;\n  }): Promise<{ cases: CyberCase[]; total: number }>;\n  getCyberCase(id: string): Promise<CyberCase | undefined>;\n  createCyberCase(caseData: InsertCyberCase, userId: string): Promise<CyberCase>;\n  updateCyberCase(id: string, caseData: Partial<InsertCyberCase>, userId: string): Promise<CyberCase>;\n  deleteCyberCase(id: string, userId: string): Promise<void>;\n  getDashboardStats(userId: string): Promise<{\n    totalCases: number;\n    totalAmount: string;\n    activeCases: number;\n    resolvedCases: number;\n    monthlyCases: number[];\n    crimeTypeStats: { type: string; count: number }[];\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: Omit<UpsertUser, 'id'>): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<UpsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async createUserSession(sessionData: Omit<InsertUserSession, 'id'>): Promise<UserSession> {\n    const [session] = await db.insert(userSessions).values(sessionData).returning();\n    return session;\n  }\n\n  async getUserSessions(userId: string): Promise<UserSession[]> {\n    return await db\n      .select()\n      .from(userSessions)\n      .where(eq(userSessions.userId, userId))\n      .orderBy(desc(userSessions.loginAt));\n  }\n\n  async getAllActiveSessions(): Promise<(UserSession & { user: User })[]> {\n    const sessions = await db\n      .select({\n        session: userSessions,\n        user: users\n      })\n      .from(userSessions)\n      .innerJoin(users, eq(userSessions.userId, users.id))\n      .where(eq(userSessions.isActive, \"true\"))\n      .orderBy(desc(userSessions.loginAt));\n    \n    return sessions.map(row => ({ ...row.session, user: row.user }));\n  }\n\n  async updateSessionLogout(sessionId: string): Promise<void> {\n    await db\n      .update(userSessions)\n      .set({ \n        isActive: \"false\", \n        logoutAt: new Date() \n      })\n      .where(eq(userSessions.sessionId, sessionId));\n  }\n\n  async getUserSettings(userId: string): Promise<UserSettings | undefined> {\n    const [settings] = await db\n      .select()\n      .from(userSettings)\n      .where(eq(userSettings.userId, userId));\n    return settings;\n  }\n\n  async upsertUserSettings(userId: string, settingsData: Partial<InsertUserSettings>): Promise<UserSettings> {\n    const [settings] = await db\n      .insert(userSettings)\n      .values({\n        userId,\n        ...settingsData,\n      })\n      .onConflictDoUpdate({\n        target: userSettings.userId,\n        set: {\n          ...settingsData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return settings;\n  }\n\n  async getCyberCases(params: {\n    page?: number;\n    limit?: number;\n    search?: string;\n    crimeType?: string;\n    dateFrom?: string;\n    dateTo?: string;\n  } = {}): Promise<{ cases: CyberCase[]; total: number }> {\n    const { page = 1, limit = 10, search = \"\", crimeType = \"\", dateFrom = \"\", dateTo = \"\" } = params;\n    const offset = (page - 1) * limit;\n\n    let whereConditions = [];\n\n    if (search) {\n      whereConditions.push(\n        sql`(${cyberCases.expedientNumber} ILIKE ${`%${search}%`} OR ${cyberCases.crimeType} ILIKE ${`%${search}%`} OR ${cyberCases.victim} ILIKE ${`%${search}%`})`\n      );\n    }\n\n    if (crimeType) {\n      whereConditions.push(eq(cyberCases.crimeType, crimeType));\n    }\n\n    if (dateFrom) {\n      whereConditions.push(gte(cyberCases.caseDate, dateFrom));\n    }\n\n    if (dateTo) {\n      whereConditions.push(lte(cyberCases.caseDate, dateTo));\n    }\n\n    const whereClause = whereConditions.length > 0 ? and(...whereConditions) : undefined;\n\n    const [cases, totalResult] = await Promise.all([\n      db\n        .select()\n        .from(cyberCases)\n        .where(whereClause)\n        .orderBy(desc(cyberCases.createdAt))\n        .limit(limit)\n        .offset(offset),\n      db\n        .select({ count: count() })\n        .from(cyberCases)\n        .where(whereClause),\n    ]);\n\n    return {\n      cases,\n      total: totalResult[0].count,\n    };\n  }\n\n  async getCyberCase(id: string): Promise<CyberCase | undefined> {\n    const [cyberCase] = await db\n      .select()\n      .from(cyberCases)\n      .where(eq(cyberCases.id, id));\n    return cyberCase;\n  }\n\n  async createCyberCase(caseData: InsertCyberCase, userId: string): Promise<CyberCase> {\n    const [cyberCase] = await db\n      .insert(cyberCases)\n      .values({\n        ...caseData,\n        createdBy: userId,\n      })\n      .returning();\n    return cyberCase;\n  }\n\n  async updateCyberCase(\n    id: string,\n    caseData: Partial<InsertCyberCase>,\n    userId: string\n  ): Promise<CyberCase> {\n    const [cyberCase] = await db\n      .update(cyberCases)\n      .set({\n        ...caseData,\n        updatedAt: new Date(),\n      })\n      .where(eq(cyberCases.id, id))\n      .returning();\n    return cyberCase;\n  }\n\n  async deleteCyberCase(id: string, userId: string): Promise<void> {\n    await db.delete(cyberCases).where(eq(cyberCases.id, id));\n  }\n\n  async getDashboardStats(userId: string): Promise<{\n    totalCases: number;\n    totalAmount: string;\n    activeCases: number;\n    resolvedCases: number;\n    monthlyCases: number[];\n    crimeTypeStats: { type: string; count: number }[];\n  }> {\n    // Get total cases and amount\n    const [totalStats] = await db\n      .select({\n        totalCases: count(),\n        totalAmount: sql<string>`COALESCE(SUM(${cyberCases.stolenAmount}), 0)`,\n      })\n      .from(cyberCases);\n\n    // Get active cases (pending, in process)\n    const [activeStats] = await db\n      .select({ count: count() })\n      .from(cyberCases)\n      .where(\n        sql`${cyberCases.investigationStatus} IN ('Pendiente', 'En proceso')`\n      );\n\n    // Get resolved cases\n    const [resolvedStats] = await db\n      .select({ count: count() })\n      .from(cyberCases)\n      .where(eq(cyberCases.investigationStatus, \"Completado\"));\n\n    // Get monthly cases for the current year\n    const monthlyCases = await db\n      .select({\n        month: sql<number>`EXTRACT(MONTH FROM ${cyberCases.caseDate})`,\n        count: count(),\n      })\n      .from(cyberCases)\n      .where(sql`EXTRACT(YEAR FROM ${cyberCases.caseDate}) = EXTRACT(YEAR FROM CURRENT_DATE)`)\n      .groupBy(sql`EXTRACT(MONTH FROM ${cyberCases.caseDate})`)\n      .orderBy(sql`EXTRACT(MONTH FROM ${cyberCases.caseDate})`);\n\n    // Get crime type statistics\n    const crimeTypeStats = await db\n      .select({\n        type: cyberCases.crimeType,\n        count: count(),\n      })\n      .from(cyberCases)\n      .groupBy(cyberCases.crimeType)\n      .orderBy(desc(count()));\n\n    // Fill monthly data for all 12 months\n    const monthlyData = Array(12).fill(0);\n    monthlyCases.forEach((item) => {\n      monthlyData[item.month - 1] = item.count;\n    });\n\n    return {\n      totalCases: totalStats.totalCases,\n      totalAmount: totalStats.totalAmount,\n      activeCases: activeStats.count,\n      resolvedCases: resolvedStats.count,\n      monthlyCases: monthlyData,\n      crimeTypeStats,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9812},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  date,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  role: varchar(\"role\").notNull().default(\"user\"), // admin, user, investigator\n  isActive: varchar(\"is_active\").notNull().default(\"true\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User sessions tracking table\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  sessionId: varchar(\"session_id\").notNull(),\n  ipAddress: varchar(\"ip_address\").notNull(),\n  userAgent: text(\"user_agent\"),\n  deviceInfo: text(\"device_info\"),\n  browser: varchar(\"browser\"),\n  os: varchar(\"os\"),\n  location: varchar(\"location\"),\n  loginAt: timestamp(\"login_at\").defaultNow(),\n  logoutAt: timestamp(\"logout_at\"),\n  isActive: varchar(\"is_active\").notNull().default(\"true\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Cyber crime cases table\nexport const cyberCases = pgTable(\"cyber_cases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseDate: date(\"case_date\").notNull(),\n  expedientNumber: varchar(\"expedient_number\").notNull().unique(),\n  crimeType: varchar(\"crime_type\").notNull(),\n  senderAccountData: text(\"sender_account_data\").notNull(),\n  victim: varchar(\"victim\").notNull(),\n  receiverAccountData: text(\"receiver_account_data\").notNull(),\n  receiverAccountResearch: text(\"receiver_account_research\"),\n  investigationStatus: varchar(\"investigation_status\").notNull().default(\"Pendiente\"),\n  stolenAmount: decimal(\"stolen_amount\", { precision: 15, scale: 2 }).notNull(),\n  observations: text(\"observations\"),\n  createdBy: varchar(\"created_by\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User settings table for personalization\nexport const userSettings = pgTable(\"user_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique().references(() => users.id, { onDelete: \"cascade\" }),\n  primaryColor: varchar(\"primary_color\").notNull().default(\"green\"),\n  secondaryColor: varchar(\"secondary_color\").notNull().default(\"gray\"),\n  transparency: varchar(\"transparency\").notNull().default(\"85\"),\n  neonEffects: varchar(\"neon_effects\").notNull().default(\"false\"),\n  fontSize: varchar(\"font_size\").notNull().default(\"14\"),\n  animations: varchar(\"animations\").notNull().default(\"false\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type InsertUserSession = typeof userSessions.$inferInsert;\nexport type UserSettings = typeof userSettings.$inferSelect;\nexport type InsertUserSettings = typeof userSettings.$inferInsert;\n\n// Form schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastLoginAt: true,\n});\n\nexport const insertUserSessionSchema = createInsertSchema(userSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCyberCaseSchema = createInsertSchema(cyberCases).omit({\n  id: true,\n  createdBy: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertCyberCase = z.infer<typeof insertCyberCaseSchema>;\nexport type CyberCase = typeof cyberCases.$inferSelect;\n","size_bytes":4459},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/hooks/useTheme\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1015},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    /* Hacker Dark Theme - Base colors */\n    --background: 0 0% 3%;\n    --foreground: 120 100% 75%;\n    --card: 0 0% 5%;\n    --card-foreground: 120 100% 90%;\n    --popover: 0 0% 5%;\n    --popover-foreground: 120 100% 90%;\n    --primary: 120 100% 45%;\n    --primary-foreground: 0 0% 0%;\n    --secondary: 0 0% 8%;\n    --secondary-foreground: 120 100% 90%;\n    --muted: 0 0% 7%;\n    --muted-foreground: 120 30% 65%;\n    --accent: 60 100% 45%;\n    --accent-foreground: 0 0% 0%;\n    --destructive: 0 80% 60%;\n    --destructive-foreground: 0 0% 100%;\n    --border: 0 0% 12%;\n    --input: 0 0% 8%;\n    --ring: 120 100% 45%;\n    --chart-1: 120 100% 45%;\n    --chart-2: 180 100% 45%;\n    --chart-3: 60 100% 45%;\n    --chart-4: 300 100% 45%;\n    --chart-5: 0 100% 45%;\n    --radius: 0.5rem;\n    --card-opacity: 0.85;\n    --modal-opacity: 0.95;\n    --base-font-size: 14px;\n  }\n\n  .dark {\n    /* Enhanced dark mode for hacker theme */\n    --background: 0 0% 2%;\n    --foreground: 120 100% 80%;\n    --card: 0 0% 4%;\n    --card-foreground: 120 100% 95%;\n    --popover: 0 0% 4%;\n    --popover-foreground: 120 100% 95%;\n    --primary: 120 100% 50%;\n    --primary-foreground: 0 0% 0%;\n    --secondary: 0 0% 6%;\n    --secondary-foreground: 120 100% 95%;\n    --muted: 0 0% 5%;\n    --muted-foreground: 120 35% 70%;\n    --accent: 60 100% 50%;\n    --accent-foreground: 0 0% 0%;\n    --destructive: 0 85% 65%;\n    --destructive-foreground: 0 0% 100%;\n    --border: 0 0% 10%;\n    --input: 0 0% 6%;\n    --ring: 120 100% 50%;\n    --chart-1: 120 100% 50%;\n    --chart-2: 180 100% 50%;\n    --chart-3: 60 100% 50%;\n    --chart-4: 300 100% 50%;\n    --chart-5: 0 100% 50%;\n    --card-opacity: 0.90;\n    --modal-opacity: 0.98;\n  }\n\n  /* Global hacker-style typography */\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground;\n    font-family: 'JetBrains Mono', 'Fira Code', 'Courier New', 'Monaco', 'Menlo', 'Consolas', monospace;\n    background: hsl(var(--background));\n    color: hsl(var(--foreground));\n  }\n\n  /* Disable effects by default */\n  html {\n    /* No effects enabled by default */\n  }\n\n  /* Matrix-style text effects - Dynamic colors (sin efectos de iluminaciÃ³n) */\n  .matrix-text {\n    color: hsl(var(--primary));\n  }\n\n  .neon-border {\n    border: 1px solid hsl(var(--primary) / 0.3);\n  }\n\n  /* Cyberpunk scrollbar - Dynamic colors */\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n  \n  ::-webkit-scrollbar-track {\n    background: hsl(var(--background));\n  }\n  \n  ::-webkit-scrollbar-thumb {\n    background: hsl(var(--primary) / 0.6);\n    border-radius: 4px;\n  }\n  \n  ::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--primary) / 0.8);\n  }\n\n  /* Custom hacker table styles - Dynamic colors */\n  .hacker-table {\n    background: hsl(var(--card));\n    border: 1px solid hsl(var(--primary) / 0.3);\n  }\n  \n  .hacker-table th {\n    background: hsl(var(--muted));\n    color: hsl(var(--primary));\n    border-bottom: 1px solid hsl(var(--primary) / 0.3);\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n  }\n\n  .hacker-table td {\n    color: hsl(var(--foreground));\n    border-bottom: 1px solid hsl(var(--border));\n  }\n\n  .hacker-table tbody tr:hover {\n    background: hsl(var(--primary) / 0.1);\n  }\n\n  /* Global button styles - Dynamic colors */\n  .btn-primary {\n    background: hsl(var(--primary));\n    color: hsl(var(--primary-foreground));\n    border: 1px solid hsl(var(--primary));\n  }\n\n  .btn-primary:hover {\n    background: hsl(var(--primary) / 0.8);\n    border-color: hsl(var(--primary) / 0.8);\n  }\n\n  /* Global input styles - Dynamic colors */\n  .input-primary {\n    background: hsl(var(--input));\n    border: 1px solid hsl(var(--border));\n    color: hsl(var(--foreground));\n  }\n\n  .input-primary:focus {\n    border-color: hsl(var(--primary));\n    outline: none;\n    box-shadow: 0 0 0 2px hsl(var(--primary) / 0.2);\n  }\n\n  /* Global card styles - Dynamic colors */\n  .card-primary {\n    background: hsl(var(--card));\n    border: 1px solid hsl(var(--primary) / 0.3);\n    color: hsl(var(--card-foreground));\n  }\n\n  /* Global text styles - Dynamic colors */\n  .text-primary-custom {\n    color: hsl(var(--primary)) !important;\n  }\n\n  .text-accent-custom {\n    color: hsl(var(--accent)) !important;\n  }\n\n  /* Global badge styles - Dynamic colors */\n  .badge-primary {\n    background: hsl(var(--primary) / 0.2);\n    color: hsl(var(--primary));\n    border: 1px solid hsl(var(--primary) / 0.3);\n  }\n\n  .badge-success {\n    background: hsl(120 100% 25% / 0.2);\n    color: hsl(120 100% 45%);\n    border: 1px solid hsl(120 100% 45% / 0.3);\n  }\n\n  .badge-warning {\n    background: hsl(45 100% 25% / 0.2);\n    color: hsl(45 100% 45%);\n    border: 1px solid hsl(45 100% 45% / 0.3);\n  }\n\n  .badge-danger {\n    background: hsl(0 100% 25% / 0.2);\n    color: hsl(0 100% 45%);\n    border: 1px solid hsl(0 100% 45% / 0.3);\n  }\n  \n  .hacker-table tr:hover {\n    background: hsl(var(--primary) / 0.05);\n    border-left: 2px solid hsl(var(--primary));\n  }\n\n  /* Button styles - Dynamic colors (sin efectos neÃ³n) */\n  .neon-button {\n    background: hsl(0 0% 8%);\n    border: 1px solid hsl(var(--primary) / 0.8);\n    color: hsl(var(--primary));\n  }\n  \n  .neon-button:hover {\n    background: hsl(var(--primary) / 0.1);\n    border-color: hsl(var(--primary));\n  }\n\n  /* Terminal-style input fields - Dynamic colors (sin efectos de iluminaciÃ³n) */\n  .terminal-input {\n    background: hsl(0 0% 6%);\n    border: 1px solid hsl(var(--primary) / 0.6);\n    color: hsl(var(--foreground));\n    font-family: inherit;\n  }\n  \n  .terminal-input:focus {\n    border-color: hsl(var(--primary));\n  }\n\n  .terminal-input::placeholder {\n    color: hsl(var(--muted-foreground));\n  }\n\n  /* Custom badge styles for cybercrime types */\n  .badge-hacking { background: hsl(0 80% 25%); color: hsl(0 100% 85%); }\n  .badge-phishing { background: hsl(30 80% 25%); color: hsl(30 100% 85%); }\n  .badge-malware { background: hsl(270 80% 25%); color: hsl(270 100% 85%); }\n  .badge-ransomware { background: hsl(0 0% 25%); color: hsl(0 0% 85%); }\n  .badge-fraud { background: hsl(210 80% 25%); color: hsl(210 100% 85%); }\n  .badge-identity { background: hsl(60 80% 25%); color: hsl(60 100% 15%); }\n  .badge-harassment { background: hsl(320 80% 25%); color: hsl(320 100% 85%); }\n  .badge-impersonation { background: hsl(240 80% 25%); color: hsl(240 100% 85%); }\n\n  .badge-pending { background: hsl(60 80% 25%); color: hsl(60 100% 15%); }\n  .badge-processing { background: hsl(210 80% 25%); color: hsl(210 100% 85%); }\n\n  /* Dynamic transparency classes */\n  .theme-card {\n    background: hsl(var(--card) / var(--card-opacity)) !important;\n    backdrop-filter: blur(8px);\n  }\n  \n  .theme-modal {\n    background: hsl(var(--card) / var(--modal-opacity)) !important;\n    backdrop-filter: blur(12px);\n  }\n\n  /* Efectos desactivados - Sin animaciones ni iluminaciÃ³n */\n  .badge-completed { background: hsl(120 80% 25%); color: hsl(120 100% 85%); }\n  .badge-no-response { background: hsl(0 80% 25%); color: hsl(0 100% 85%); }\n  .badge-rejected { background: hsl(0 0% 25%); color: hsl(0 0% 85%); }\n\n  /* Dynamic transparency system */\n  .theme-card {\n    background: hsl(var(--card) / var(--card-opacity, 0.85));\n  }\n  \n  .theme-modal {\n    background: hsl(var(--card) / var(--modal-opacity, 0.95)) !important;\n    backdrop-filter: blur(8px);\n  }\n\n  /* Todas las animaciones eliminadas */\n\n  /* Animation toggle */\n  .animations-enabled * {\n    transition: all 0.3s ease;\n  }\n}","size_bytes":7524},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/Carpeta nueva/CaseModal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Save, X } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { insertCyberCaseSchema, type CyberCase } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertCyberCaseSchema.extend({\n  caseDate: z.string().min(1, \"La fecha es requerida\"),\n  stolenAmount: z.string().min(1, \"El monto es requerido\"),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface CaseModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingCase?: CyberCase | null;\n}\n\nconst crimeTypes = [\n  \"Hacking\",\n  \"Phishing\", \n  \"Malware\",\n  \"Ransomware\",\n  \"Fraude cibernÃ©tico\",\n  \"Robo de identidad\",\n  \"Ciberacoso\",\n  \"SuplantaciÃ³n de identidad\",\n];\n\nconst investigationStatuses = [\n  \"Pendiente\",\n  \"En proceso\",\n  \"Completado\",\n  \"Sin respuesta\",\n  \"Rechazado\",\n];\n\nexport function CaseModal({ isOpen, onClose, editingCase }: CaseModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      caseDate: editingCase?.caseDate || \"\",\n      expedientNumber: editingCase?.expedientNumber || \"\",\n      crimeType: editingCase?.crimeType || \"\",\n      senderAccountData: editingCase?.senderAccountData || \"\",\n      victim: editingCase?.victim || \"\",\n      receiverAccountData: editingCase?.receiverAccountData || \"\",\n      investigationStatus: editingCase?.investigationStatus || \"Pendiente\",\n      stolenAmount: editingCase?.stolenAmount || \"\",\n      observations: editingCase?.observations || \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const payload = {\n        ...data,\n        stolenAmount: parseFloat(data.stolenAmount).toString(),\n      };\n      await apiRequest(\"POST\", \"/api/cyber-cases\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cyber-cases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Ãxito\",\n        description: \"Caso creado correctamente\",\n      });\n      handleClose();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear el caso\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const payload = {\n        ...data,\n        stolenAmount: parseFloat(data.stolenAmount).toString(),\n      };\n      await apiRequest(\"PUT\", `/api/cyber-cases/${editingCase?.id}`, payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cyber-cases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Ãxito\",\n        description: \"Caso actualizado correctamente\",\n      });\n      handleClose();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar el caso\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  const onSubmit = (data: FormData) => {\n    if (editingCase) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {editingCase ? \"Editar Caso\" : \"Agregar Nuevo Caso\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"caseDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      Fecha <span className=\"text-red-500\">*</span>\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        data-testid=\"input-case-date\"\n                        type=\"date\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"expedientNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      NÂ° de Expediente <span className=\"text-red-500\">*</span>\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        data-testid=\"input-expedient-number\"\n                        placeholder=\"EXP-2024-XXXX\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"crimeType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    Tipo de Delito <span className=\"text-red-500\">*</span>\n                  </FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-crime-type-modal\">\n                        <SelectValue placeholder=\"Seleccionar tipo de delito\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {crimeTypes.map((type) => (\n                        <SelectItem key={type} value={type}>\n                          {type}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"senderAccountData\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      Datos de la Cuenta Emisora <span className=\"text-red-500\">*</span>\n                    </FormLabel>\n                    <FormControl>\n                      <Textarea\n                        data-testid=\"textarea-sender-account\"\n                        placeholder=\"Banco, nÃºmero de cuenta, titular, etc.\"\n                        rows={3}\n                        className=\"resize-vertical\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"receiverAccountData\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      Datos de la Cuenta Receptora <span className=\"text-red-500\">*</span>\n                    </FormLabel>\n                    <FormControl>\n                      <Textarea\n                        data-testid=\"textarea-receiver-account\"\n                        placeholder=\"Banco, nÃºmero de cuenta, titular, etc.\"\n                        rows={3}\n                        className=\"resize-vertical\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"receiverAccountResearch\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      Pesquisa a Cuenta Receptora\n                    </FormLabel>\n                    <FormControl>\n                      <Textarea\n                        data-testid=\"textarea-receiver-research\"\n                        placeholder=\"Resultado de la investigaciÃ³n de la cuenta receptora\"\n                        rows={3}\n                        className=\"resize-vertical\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"victim\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    VÃ­ctima <span className=\"text-red-500\">*</span>\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      data-testid=\"input-victim\"\n                      placeholder=\"Nombre completo de la vÃ­ctima\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"investigationStatus\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Pesquisa a Cuenta Receptora</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-investigation-status\">\n                          <SelectValue placeholder=\"Seleccionar estado\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {investigationStatuses.map((status) => (\n                          <SelectItem key={status} value={status}>\n                            {status}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"stolenAmount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      Monto SustraÃ­do <span className=\"text-red-500\">*</span>\n                    </FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <span className=\"absolute left-4 top-3 text-gray-500\">$</span>\n                        <Input\n                          data-testid=\"input-stolen-amount\"\n                          type=\"number\"\n                          placeholder=\"0.00\"\n                          step=\"0.01\"\n                          className=\"pl-8\"\n                          {...field}\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"observations\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Observaciones Adicionales</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      data-testid=\"textarea-observations\"\n                      placeholder=\"Detalles adicionales del caso, evidencias, notas, etc.\"\n                      rows={4}\n                      className=\"resize-vertical\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-4 pt-6 border-t border-gray-200\">\n              <Button\n                data-testid=\"button-cancel\"\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                disabled={isLoading}\n              >\n                <X className=\"w-4 h-4 mr-2\" />\n                Cancelar\n              </Button>\n              <Button\n                data-testid=\"button-save\"\n                type=\"submit\"\n                disabled={isLoading}\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {isLoading \n                  ? \"Guardando...\" \n                  : editingCase \n                    ? \"Actualizar Caso\" \n                    : \"Guardar Caso\"\n                }\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14547},"client/src/Carpeta nueva/Dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  FolderOpen, \n  DollarSign, \n  AlertTriangle, \n  CheckCircle,\n  Plus,\n  Edit,\n  Check\n} from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function Dashboard() {\n  const { toast } = useToast();\n\n  const { data: stats, isLoading, error } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (error && isUnauthorizedError(error as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"mb-8\">\n          <Skeleton className=\"h-8 w-64 mb-2\" />\n          <Skeleton className=\"h-4 w-96\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-12 w-12 rounded-lg mb-4\" />\n                <Skeleton className=\"h-4 w-24 mb-2\" />\n                <Skeleton className=\"h-8 w-16\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-red-600\">Error al cargar las estadÃ­sticas del dashboard</p>\n        </div>\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount: string | number) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return new Intl.NumberFormat('es-ES', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(num);\n  };\n\n  const statCards = [\n    {\n      title: \"Total de Casos\",\n      value: stats?.totalCases || 0,\n      icon: FolderOpen,\n      iconBg: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      change: \"+12%\",\n      changeText: \"desde el mes pasado\",\n      changeColor: \"text-green-600\",\n    },\n    {\n      title: \"Monto Total\",\n      value: formatCurrency(stats?.totalAmount || 0),\n      icon: DollarSign,\n      iconBg: \"bg-green-100\",\n      iconColor: \"text-green-600\",\n      change: \"+8%\",\n      changeText: \"desde el mes pasado\",\n      changeColor: \"text-green-600\",\n    },\n    {\n      title: \"Casos Activos\",\n      value: stats?.activeCases || 0,\n      icon: AlertTriangle,\n      iconBg: \"bg-yellow-100\",\n      iconColor: \"text-yellow-600\",\n      change: \"+3%\",\n      changeText: \"desde la semana pasada\",\n      changeColor: \"text-red-600\",\n    },\n    {\n      title: \"Casos Resueltos\",\n      value: stats?.resolvedCases || 0,\n      icon: CheckCircle,\n      iconBg: \"bg-purple-100\",\n      iconColor: \"text-purple-600\",\n      change: \"+15%\",\n      changeText: \"desde el mes pasado\",\n      changeColor: \"text-green-600\",\n    },\n  ];\n\n  const recentActivities = [\n    {\n      icon: Plus,\n      iconBg: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      title: \"Nuevo caso agregado #EXP-2024-0156\",\n      description: \"Fraude electrÃ³nico - Monto: $45,000\",\n      time: \"Hace 2 horas\",\n    },\n    {\n      icon: Check,\n      iconBg: \"bg-green-100\",\n      iconColor: \"text-green-600\",\n      title: \"Caso resuelto #EXP-2024-0143\",\n      description: \"Estafa bancaria - Recuperado: $12,500\",\n      time: \"Hace 4 horas\",\n    },\n    {\n      icon: Edit,\n      iconBg: \"bg-yellow-100\",\n      iconColor: \"text-yellow-600\",\n      title: \"ActualizaciÃ³n de caso #EXP-2024-0134\",\n      description: \"Nueva informaciÃ³n de pesquisa agregada\",\n      time: \"Hace 6 horas\",\n    },\n  ];\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-800 mb-2\">Panel de Control</h2>\n        <p className=\"text-gray-600\">Resumen de estadÃ­sticas y mÃ©tricas del sistema</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {statCards.map((stat, index) => {\n          const Icon = stat.icon;\n          return (\n            <Card key={index}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">{stat.title}</p>\n                    <p data-testid={`stat-${stat.title.toLowerCase().replace(/\\s+/g, '-')}`} className=\"text-3xl font-bold text-gray-800\">\n                      {stat.value}\n                    </p>\n                  </div>\n                  <div className={`w-12 h-12 ${stat.iconBg} rounded-lg flex items-center justify-center`}>\n                    <Icon className={`${stat.iconColor} text-xl`} size={24} />\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center\">\n                  <span className={`text-sm font-medium ${stat.changeColor}`}>\n                    {stat.change}\n                  </span>\n                  <span className=\"text-gray-600 text-sm ml-2\">{stat.changeText}</span>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Charts Row */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Casos por Mes</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"w-3 h-3 bg-primary rounded-full\"></span>\n                <span className=\"text-sm text-gray-600\">2024</span>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 flex items-center justify-center\">\n              <p className=\"text-gray-500\">GrÃ¡fico de casos por mes</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Tipos de Delito</CardTitle>\n              <button className=\"text-sm text-primary hover:underline\">Ver todos</button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              {stats?.crimeTypeStats && stats.crimeTypeStats.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {stats.crimeTypeStats.slice(0, 5).map((crime, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-700\">{crime.type}</span>\n                      <span className=\"text-sm font-medium text-gray-900\">{crime.count}</span>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center h-full\">\n                  <p className=\"text-gray-500\">No hay datos de tipos de delito</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Actividad Reciente</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {recentActivities.map((activity, index) => {\n              const Icon = activity.icon;\n              return (\n                <div key={index} className=\"flex items-center space-x-4 p-4 bg-gray-50 rounded-lg\">\n                  <div className={`w-8 h-8 ${activity.iconBg} rounded-full flex items-center justify-center`}>\n                    <Icon className={`${activity.iconColor} text-sm`} size={16} />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-gray-800\">{activity.title}</p>\n                    <p className=\"text-sm text-gray-600\">{activity.description}</p>\n                  </div>\n                  <span className=\"text-sm text-gray-500\">{activity.time}</span>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8603},"client/src/Carpeta nueva/DataManagement.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Plus, \n  Search, \n  Filter, \n  X, \n  Download, \n  Eye, \n  Edit, \n  Trash2,\n  ChevronLeft,\n  ChevronRight\n} from \"lucide-react\";\nimport { CaseModal } from \"./CaseModal\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { CyberCase } from \"@shared/schema\";\n\nexport function DataManagement() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingCase, setEditingCase] = useState<CyberCase | null>(null);\n  const [filters, setFilters] = useState({\n    search: \"\",\n    crimeType: \"\",\n    dateFrom: \"\",\n    dateTo: \"\",\n    page: 1,\n    limit: 10,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: casesData, isLoading, error } = useQuery({\n    queryKey: [\"/api/cyber-cases\", filters],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (error && isUnauthorizedError(error as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/cyber-cases/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cyber-cases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Ãxito\",\n        description: \"Caso eliminado correctamente\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar el caso\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({\n      ...prev,\n      [key]: value,\n      page: 1, // Reset to first page when filtering\n    }));\n  };\n\n  const handleClearFilters = () => {\n    setFilters({\n      search: \"\",\n      crimeType: \"\",\n      dateFrom: \"\",\n      dateTo: \"\",\n      page: 1,\n      limit: 10,\n    });\n  };\n\n  const handleEditCase = (caseData: CyberCase) => {\n    setEditingCase(caseData);\n    setIsModalOpen(true);\n  };\n\n  const handleDeleteCase = (id: string) => {\n    if (window.confirm(\"Â¿EstÃ¡ seguro de que desea eliminar este caso?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingCase(null);\n  };\n\n  const getCrimeTypeBadgeColor = (type: string) => {\n    const colors = {\n      \"Hacking\": \"bg-red-100 text-red-800\",\n      \"Phishing\": \"bg-orange-100 text-orange-800\",\n      \"Malware\": \"bg-purple-100 text-purple-800\",\n      \"Ransomware\": \"bg-gray-100 text-gray-800\",\n      \"Fraude cibernÃ©tico\": \"bg-blue-100 text-blue-800\",\n      \"Robo de identidad\": \"bg-yellow-100 text-yellow-800\",\n      \"Ciberacoso\": \"bg-pink-100 text-pink-800\",\n      \"SuplantaciÃ³n de identidad\": \"bg-indigo-100 text-indigo-800\",\n    };\n    return colors[type as keyof typeof colors] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getInvestigationStatusBadge = (status: string) => {\n    const statusMap = {\n      \"Pendiente\": \"bg-yellow-100 text-yellow-800\",\n      \"En proceso\": \"bg-blue-100 text-blue-800\",\n      \"Completado\": \"bg-green-100 text-green-800\",\n      \"Sin respuesta\": \"bg-red-100 text-red-800\",\n      \"Rechazado\": \"bg-gray-100 text-gray-800\",\n    };\n    return statusMap[status as keyof typeof statusMap] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const formatCurrency = (amount: string) => {\n    const num = parseFloat(amount);\n    return new Intl.NumberFormat('es-ES', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(num);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('es-ES');\n  };\n\n  const totalPages = Math.ceil((casesData?.total || 0) / filters.limit);\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"mb-8\">\n          <Skeleton className=\"h-8 w-64 mb-2\" />\n          <Skeleton className=\"h-4 w-96\" />\n        </div>\n        <div className=\"space-y-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                {Array.from({ length: 4 }).map((_, i) => (\n                  <Skeleton key={i} className=\"h-10\" />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-0\">\n              <div className=\"space-y-4 p-6\">\n                {Array.from({ length: 5 }).map((_, i) => (\n                  <Skeleton key={i} className=\"h-16 w-full\" />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-red-600\">Error al cargar los datos</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-8 flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-2\">GestiÃ³n de Casos</h2>\n          <p className=\"text-gray-600\">Administre todos los casos de delitos informÃ¡ticos</p>\n        </div>\n        <Button\n          data-testid=\"button-new-case\"\n          onClick={() => setIsModalOpen(true)}\n          className=\"mt-4 sm:mt-0\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Nuevos Datos\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"search\">Buscar</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"search\"\n                  data-testid=\"input-search\"\n                  placeholder=\"Buscar por expediente, delito...\"\n                  value={filters.search}\n                  onChange={(e) => handleFilterChange(\"search\", e.target.value)}\n                  className=\"pl-10\"\n                />\n                <Search className=\"w-4 h-4 absolute left-3 top-3 text-gray-400\" />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"crimeType\">Tipo de Delito</Label>\n              <Select\n                value={filters.crimeType}\n                onValueChange={(value) => handleFilterChange(\"crimeType\", value)}\n              >\n                <SelectTrigger data-testid=\"select-crime-type\">\n                  <SelectValue placeholder=\"Todos los delitos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos los delitos</SelectItem>\n                  <SelectItem value=\"Hacking\">Hacking</SelectItem>\n                  <SelectItem value=\"Phishing\">Phishing</SelectItem>\n                  <SelectItem value=\"Malware\">Malware</SelectItem>\n                  <SelectItem value=\"Ransomware\">Ransomware</SelectItem>\n                  <SelectItem value=\"Fraude cibernÃ©tico\">Fraude cibernÃ©tico</SelectItem>\n                  <SelectItem value=\"Robo de identidad\">Robo de identidad</SelectItem>\n                  <SelectItem value=\"Ciberacoso\">Ciberacoso</SelectItem>\n                  <SelectItem value=\"SuplantaciÃ³n de identidad\">SuplantaciÃ³n de identidad</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"dateFrom\">Fecha Desde</Label>\n              <Input\n                id=\"dateFrom\"\n                data-testid=\"input-date-from\"\n                type=\"date\"\n                value={filters.dateFrom}\n                onChange={(e) => handleFilterChange(\"dateFrom\", e.target.value)}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"dateTo\">Fecha Hasta</Label>\n              <Input\n                id=\"dateTo\"\n                data-testid=\"input-date-to\"\n                type=\"date\"\n                value={filters.dateTo}\n                onChange={(e) => handleFilterChange(\"dateTo\", e.target.value)}\n              />\n            </div>\n          </div>\n\n          <div className=\"mt-4 flex flex-wrap gap-2\">\n            <Button data-testid=\"button-filter\" variant=\"default\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filtrar\n            </Button>\n            <Button data-testid=\"button-clear\" variant=\"outline\" onClick={handleClearFilters}>\n              <X className=\"w-4 h-4 mr-2\" />\n              Limpiar\n            </Button>\n            <Button data-testid=\"button-export\" variant=\"outline\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Exportar\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Data Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50 border-b border-gray-200\">\n                <tr>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    Fecha\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    NÂ° de Expediente\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    Delito\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    VÃ­ctima\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    Pesquisa Cuenta Receptora\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    Estado\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    Monto SustraÃ­do\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    Acciones\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {casesData?.cases?.length === 0 ? (\n                  <tr>\n                    <td colSpan={8} className=\"px-6 py-12 text-center text-gray-500\">\n                      No se encontraron casos que coincidan con los filtros\n                    </td>\n                  </tr>\n                ) : (\n                  casesData?.cases?.map((caseItem) => (\n                    <tr key={caseItem.id} className=\"hover:bg-gray-50 transition-colors\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {formatDate(caseItem.caseDate)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className=\"text-sm font-medium text-primary\">\n                          {caseItem.expedientNumber}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <Badge className={getCrimeTypeBadgeColor(caseItem.crimeType)}>\n                          {caseItem.crimeType}\n                        </Badge>\n                      </td>\n                      <td className=\"px-6 py-4 text-sm text-gray-900\">{caseItem.victim}</td>\n                      <td className=\"px-6 py-4 text-sm text-gray-900\">\n                        {caseItem.receiverAccountResearch || \"No especificado\"}\n                      </td>\n                      <td className=\"px-6 py-4 text-sm text-gray-900\">\n                        <Badge className={getInvestigationStatusBadge(caseItem.investigationStatus)}>\n                          {caseItem.investigationStatus}\n                        </Badge>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                        {formatCurrency(caseItem.stolenAmount)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-right\">\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            data-testid={`button-view-${caseItem.id}`}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEditCase(caseItem)}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            data-testid={`button-edit-${caseItem.id}`}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEditCase(caseItem)}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            data-testid={`button-delete-${caseItem.id}`}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteCase(caseItem.id)}\n                            disabled={deleteMutation.isPending}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Pagination */}\n          {casesData?.total > 0 && (\n            <div className=\"bg-gray-50 px-6 py-4 border-t border-gray-200 flex items-center justify-between\">\n              <div className=\"flex items-center text-sm text-gray-600\">\n                Mostrando{\" \"}\n                <span className=\"font-medium text-gray-900 mx-1\">\n                  {((filters.page - 1) * filters.limit) + 1}-{Math.min(filters.page * filters.limit, casesData.total)}\n                </span>{\" \"}\n                de{\" \"}\n                <span className=\"font-medium text-gray-900 ml-1\">{casesData.total}</span>{\" \"}\n                resultados\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  data-testid=\"button-prev-page\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setFilters(prev => ({ ...prev, page: prev.page - 1 }))}\n                  disabled={filters.page <= 1}\n                >\n                  <ChevronLeft className=\"w-4 h-4\" />\n                  Anterior\n                </Button>\n                <span className=\"text-sm text-gray-600\">\n                  PÃ¡gina {filters.page} de {totalPages}\n                </span>\n                <Button\n                  data-testid=\"button-next-page\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setFilters(prev => ({ ...prev, page: prev.page + 1 }))}\n                  disabled={filters.page >= totalPages}\n                >\n                  Siguiente\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <CaseModal\n        isOpen={isModalOpen}\n        onClose={handleCloseModal}\n        editingCase={editingCase}\n      />\n    </div>\n  );\n}\n","size_bytes":16988},"client/src/Carpeta nueva/Layout.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"./Sidebar\";\nimport { TopBar } from \"./TopBar\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n  currentSection: string;\n  onSectionChange: (section: string) => void;\n}\n\nexport function Layout({ children, currentSection, onSectionChange }: LayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const toggleSidebar = () => {\n    setSidebarOpen(!sidebarOpen);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <Sidebar \n        isOpen={sidebarOpen}\n        onClose={() => setSidebarOpen(false)}\n        currentSection={currentSection}\n        onSectionChange={onSectionChange}\n      />\n      \n      <div className=\"lg:ml-64\">\n        <TopBar onMenuClick={toggleSidebar} currentSection={currentSection} />\n        <main className=\"pt-16 min-h-screen\">\n          {children}\n        </main>\n      </div>\n\n      {/* Mobile overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-20 lg:hidden\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":1133},"client/src/Carpeta nueva/Sidebar.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { BarChart3, Database, Settings, Globe, MessageCircle, LogOut, Shield } from \"lucide-react\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  currentSection: string;\n  onSectionChange: (section: string) => void;\n}\n\nconst navigation = [\n  { id: \"dashboard\", name: \"Dashboard\", icon: BarChart3 },\n  { id: \"intelligence\", name: \"Inteligencia\", icon: Globe },\n  { id: \"data-management\", name: \"GestiÃ³n de Casos\", icon: Database },\n  { id: \"chatbot\", name: \"Asistente Virtual\", icon: MessageCircle },\n  { id: \"settings\", name: \"ConfiguraciÃ³n\", icon: Settings },\n];\n\nexport function Sidebar({ isOpen, onClose, currentSection, onSectionChange }: SidebarProps) {\n  const handleSectionClick = (sectionId: string) => {\n    onSectionChange(sectionId);\n    onClose(); // Close sidebar on mobile after selection\n  };\n\n  const handleLogout = async () => {\n    try {\n      const response = await fetch('/api/logout', { \n        method: 'POST',\n        credentials: 'include'\n      });\n      if (response.ok) {\n        window.location.href = '/';\n      } else {\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error al cerrar sesiÃ³n:', error);\n      window.location.href = '/';\n    }\n  };\n\n  return (\n    <div\n      className={cn(\n        \"fixed left-0 top-0 h-full w-64 bg-white shadow-lg transform transition-transform duration-300 z-30\",\n        isOpen ? \"translate-x-0\" : \"-translate-x-full lg:translate-x-0\"\n      )}\n    >\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Shield className=\"w-6 h-6 text-white\" />\n          </div>\n          <div className=\"ml-3\">\n            <h2 className=\"text-lg font-semibold text-gray-800\">Sistema CyberCrime</h2>\n            <p className=\"text-xs text-gray-600\">Delitos InformÃ¡ticos</p>\n          </div>\n        </div>\n      </div>\n\n      <nav className=\"mt-6\">\n        <ul className=\"space-y-1 px-3\">\n          {navigation.map((item) => {\n            const Icon = item.icon;\n            const isActive = currentSection === item.id;\n            \n            return (\n              <li key={item.id}>\n                <button\n                  data-testid={`nav-${item.id}`}\n                  onClick={() => handleSectionClick(item.id)}\n                  className={cn(\n                    \"w-full flex items-center px-4 py-3 text-left rounded-lg transition-colors group\",\n                    isActive\n                      ? \"bg-blue-50 text-primary\"\n                      : \"text-gray-700 hover:bg-gray-100 hover:text-gray-900\"\n                  )}\n                >\n                  <Icon className={cn(\n                    \"w-5 h-5\",\n                    isActive ? \"text-primary\" : \"text-gray-500 group-hover:text-primary\"\n                  )} />\n                  <span className=\"ml-3\">{item.name}</span>\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n\n      <div className=\"absolute bottom-0 left-0 right-0 p-4 border-t border-gray-200\">\n        <button\n          data-testid=\"button-logout\"\n          onClick={handleLogout}\n          className=\"w-full flex items-center px-4 py-3 text-left rounded-lg hover:bg-red-50 transition-colors group\"\n        >\n          <LogOut className=\"w-5 h-5 text-gray-500 group-hover:text-red-500\" />\n          <span className=\"ml-3 text-gray-700 group-hover:text-red-700\">Cerrar SesiÃ³n</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3621},"client/src/Carpeta nueva/TopBar.tsx":{"content":"import { Bell, Menu, User, LogOut } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface TopBarProps {\n  onMenuClick: () => void;\n  currentSection: string;\n}\n\nconst sectionTitles = {\n  dashboard: \"Dashboard\",\n  \"data-management\": \"GestiÃ³n de Datos\",\n  settings: \"ConfiguraciÃ³n\",\n  users: \"Usuarios\",\n};\n\nexport function TopBar({ onMenuClick, currentSection }: TopBarProps) {\n  const { user } = useAuth() as { user: any };\n\n  return (\n    <div className=\"fixed top-0 left-0 lg:left-64 right-0 h-16 bg-white shadow-sm border-b border-gray-200 z-20\">\n      <div className=\"flex items-center justify-between h-full px-6\">\n        <div className=\"flex items-center\">\n          <button\n            data-testid=\"button-menu\"\n            onClick={onMenuClick}\n            className=\"lg:hidden p-2 rounded-md hover:bg-gray-100\"\n          >\n            <Menu className=\"w-6 h-6 text-gray-600\" />\n          </button>\n          <h1 className=\"ml-4 text-xl font-semibold text-gray-800\">\n            {sectionTitles[currentSection as keyof typeof sectionTitles] || \"Sistema\"}\n          </h1>\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          <button \n            data-testid=\"button-notifications\"\n            className=\"p-2 rounded-full hover:bg-gray-100 relative\"\n          >\n            <Bell className=\"w-5 h-5 text-gray-600\" />\n            <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full\"></span>\n          </button>\n\n          <div className=\"flex items-center\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              {user?.profileImageUrl ? (\n                <img\n                  src={user.profileImageUrl}\n                  alt=\"Profile\"\n                  className=\"w-8 h-8 rounded-full object-cover\"\n                />\n              ) : (\n                <User className=\"w-4 h-4 text-white\" />\n              )}\n            </div>\n            <div className=\"ml-3 hidden sm:block\">\n              <p data-testid=\"text-username\" className=\"text-sm font-medium text-gray-800\">\n                {user?.firstName || user?.lastName \n                  ? `${user.firstName || \"\"} ${user.lastName || \"\"}`.trim()\n                  : user?.email || \"Usuario\"\n                }\n              </p>\n              <p className=\"text-xs text-gray-600\">Administrador</p>\n            </div>\n          </div>\n\n          <button\n            onClick={async () => {\n              await fetch('/api/logout', { method: 'POST' });\n              window.location.reload();\n            }}\n            data-testid=\"button-logout\"\n            className=\"p-2 rounded-full hover:bg-gray-100 text-gray-600 hover:text-gray-800\"\n          >\n            <LogOut className=\"w-5 h-5\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2846},"client/src/components/CaseModal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Save, X } from \"lucide-react\";\nimport { insertCyberCaseSchema, type CyberCase } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertCyberCaseSchema.extend({\n  caseDate: z.string().min(1, \"La fecha es requerida\"),\n  stolenAmount: z.string().min(1, \"El monto es requerido\"),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface CaseModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: any) => void;\n  initialData?: CyberCase | null;\n  isLoading?: boolean;\n}\n\nconst crimeTypes = [\n  \"Hacking\",\n  \"Phishing\", \n  \"Malware\",\n  \"Ransomware\",\n  \"Fraude cibernÃ©tico\",\n  \"Robo de identidad\",\n  \"Ciberacoso\",\n  \"SuplantaciÃ³n de identidad\",\n];\n\nconst investigationStatuses = [\n  \"Pendiente\",\n  \"En proceso\",\n  \"Completado\",\n  \"Sin respuesta\",\n  \"Rechazado\",\n];\n\nexport function CaseModal({ isOpen, onClose, onSubmit, initialData, isLoading = false }: CaseModalProps) {\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      caseDate: initialData?.caseDate || \"\",\n      expedientNumber: initialData?.expedientNumber || \"\",\n      crimeType: initialData?.crimeType || \"\",\n      senderAccountData: initialData?.senderAccountData || \"\",\n      victim: initialData?.victim || \"\",\n      receiverAccountData: initialData?.receiverAccountData || \"\",\n      investigationStatus: initialData?.investigationStatus || \"Pendiente\",\n      stolenAmount: initialData?.stolenAmount?.toString() || \"\",\n      observations: initialData?.observations || \"\",\n      receiverAccountResearch: initialData?.receiverAccountResearch || \"\",\n    },\n  });\n\n  const handleSubmit = (data: FormData) => {\n    const payload = {\n      ...data,\n      stolenAmount: parseFloat(data.stolenAmount),\n    };\n    onSubmit(payload);\n    form.reset();\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto theme-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"matrix-text font-mono text-xl\">\n            {initialData ? \"EDITAR CASO\" : \"NUEVO CASO\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"caseDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-mono text-sm\">FECHA DEL CASO</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} className=\"font-mono\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"expedientNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-mono text-sm\">NÃMERO DE EXPEDIENTE</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"EXP-2025-001\" className=\"font-mono\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"crimeType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-mono text-sm\">TIPO DE DELITO</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"font-mono\">\n                          <SelectValue placeholder=\"Selecciona el tipo de delito\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {crimeTypes.map((type) => (\n                          <SelectItem key={type} value={type} className=\"font-mono\">\n                            {type}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"victim\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-mono text-sm\">VÃCTIMA</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"Nombre de la vÃ­ctima\" className=\"font-mono\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"stolenAmount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-mono text-sm\">MONTO ESTAFADO</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        className=\"font-mono\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"investigationStatus\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-mono text-sm\">ESTADO DE INVESTIGACIÃN</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"font-mono\">\n                          <SelectValue placeholder=\"Selecciona el estado\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {investigationStatuses.map((status) => (\n                          <SelectItem key={status} value={status} className=\"font-mono\">\n                            {status}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"senderAccountData\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"font-mono text-sm\">DATOS DE LA CUENTA EMISORA</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"InformaciÃ³n de la cuenta desde donde se enviÃ³ el dinero...\"\n                      className=\"font-mono min-h-[80px]\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"receiverAccountData\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"font-mono text-sm\">DATOS DE LA CUENTA RECEPTORA</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"InformaciÃ³n de la cuenta donde se recibiÃ³ el dinero...\"\n                      className=\"font-mono min-h-[80px]\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"observations\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"font-mono text-sm\">OBSERVACIONES</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Observaciones adicionales del caso...\"\n                      className=\"font-mono min-h-[100px]\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-4 pt-4 border-t border-border/20\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                className=\"font-mono\"\n                disabled={isLoading}\n              >\n                <X className=\"w-4 h-4 mr-2\" />\n                CANCELAR\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"font-mono neon-border\"\n                disabled={isLoading}\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {isLoading ? \"GUARDANDO...\" : \"GUARDAR\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10095},"client/src/components/ChatbotAdministration.tsx":{"content":"import { useState } from \"react\";\nimport { Bot, Settings, MessageSquare, TrendingUp, RefreshCw, Save } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ChatbotConfig {\n  isActive: boolean;\n  welcomeMessage: string;\n  maxResponseLength: number;\n  responseDelay: number;\n  enableLearning: boolean;\n  logConversations: boolean;\n}\n\ninterface Conversation {\n  id: string;\n  usuario: string;\n  mensaje: string;\n  respuesta: string;\n  fecha: string;\n  calificacion?: number;\n}\n\nconst mockConversations: Conversation[] = [\n  {\n    id: \"1\",\n    usuario: \"MarÃ­a GonzÃ¡lez\",\n    mensaje: \"Â¿CÃ³mo analizar un caso de phishing?\",\n    respuesta: \"El phishing es una tÃ©cnica de ingenierÃ­a social donde los atacantes se hacen pasar por entidades confiables...\",\n    fecha: \"2025-01-16 22:44\",\n    calificacion: 5\n  },\n  {\n    id: \"2\",\n    usuario: \"Carlos RodrÃ­guez\",\n    mensaje: \"InformaciÃ³n sobre malware bancario\",\n    respuesta: \"Para casos de malware en delitos informÃ¡ticos: 1. AÃ­sla el sistema infectado 2. Captura evidencia forense...\",\n    fecha: \"2025-01-16 22:45\",\n    calificacion: 4\n  },\n  {\n    id: \"3\",\n    usuario: \"Admin Sistema\",\n    mensaje: \"Hola\",\n    respuesta: \"Hola, soy tu asistente especializado en delitos informÃ¡ticos. He recibido tu consulta...\",\n    fecha: \"2025-01-16 22:45\"\n  }\n];\n\nexport function ChatbotAdministration() {\n  const [config, setConfig] = useState<ChatbotConfig>({\n    isActive: true,\n    welcomeMessage: \"Â¡Hola! Soy tu asistente especializado en delitos informÃ¡ticos. Puedo ayudarte con informaciÃ³n sobre investigaciones, tÃ©cnicas de anÃ¡lisis, normativas legales y mÃ¡s. Â¿En quÃ© puedo asistirte?\",\n    maxResponseLength: 500,\n    responseDelay: 1000,\n    enableLearning: true,\n    logConversations: true\n  });\n  \n  const [conversations, setConversations] = useState<Conversation[]>(mockConversations);\n  const [newResponse, setNewResponse] = useState(\"\");\n  const [newKeyword, setNewKeyword] = useState(\"\");\n  const { toast } = useToast();\n\n  const handleSaveConfig = () => {\n    // AquÃ­ se guardarÃ­a la configuraciÃ³n en el backend\n    toast({\n      title: \"ConfiguraciÃ³n guardada\",\n      description: \"Los cambios en el chatbot han sido aplicados exitosamente\",\n    });\n  };\n\n  const handleAddResponse = () => {\n    if (!newKeyword || !newResponse) {\n      toast({\n        title: \"Error\",\n        description: \"Palabra clave y respuesta son obligatorias\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Simular agregado de nueva respuesta\n    toast({\n      title: \"Respuesta agregada\",\n      description: `Nueva respuesta agregada para \"${newKeyword}\"`,\n    });\n    \n    setNewKeyword(\"\");\n    setNewResponse(\"\");\n  };\n\n  const stats = {\n    totalConversations: conversations.length,\n    averageRating: conversations.filter(c => c.calificacion).reduce((acc, c) => acc + (c.calificacion || 0), 0) / conversations.filter(c => c.calificacion).length,\n    responseRate: 100, // Porcentaje de respuestas exitosas\n    activeUsers: new Set(conversations.map(c => c.usuario)).size\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-3xl font-bold matrix-text font-mono\">ADMINISTRACIÃN DE CHATBOT</h2>\n          <p className=\"text-muted-foreground font-mono\">ConfiguraciÃ³n y monitoreo del asistente virtual</p>\n        </div>\n        <Button onClick={handleSaveConfig} className=\"neon-border font-mono\">\n          <Save className=\"w-4 h-4 mr-2\" />\n          GUARDAR CONFIGURACIÃN\n        </Button>\n      </div>\n\n      {/* EstadÃ­sticas */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"neon-border theme-card\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-mono flex items-center\">\n              <MessageSquare className=\"w-4 h-4 mr-2\" />\n              CONVERSACIONES\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold matrix-text\">{stats.totalConversations}</div>\n          </CardContent>\n        </Card>\n        <Card className=\"neon-border theme-card\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-mono flex items-center\">\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              CALIFICACIÃN\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-500\">\n              {stats.averageRating.toFixed(1)}/5\n            </div>\n          </CardContent>\n        </Card>\n        <Card className=\"neon-border theme-card\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-mono\">TASA RESPUESTA</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-500\">{stats.responseRate}%</div>\n          </CardContent>\n        </Card>\n        <Card className=\"neon-border theme-card\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-mono\">USUARIOS ACTIVOS</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-500\">{stats.activeUsers}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"config\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"config\" className=\"font-mono\">CONFIGURACIÃN</TabsTrigger>\n          <TabsTrigger value=\"responses\" className=\"font-mono\">RESPUESTAS</TabsTrigger>\n          <TabsTrigger value=\"logs\" className=\"font-mono\">CONVERSACIONES</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"config\">\n          <Card className=\"neon-border theme-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center font-mono\">\n                <Settings className=\"w-5 h-5 mr-2\" />\n                CONFIGURACIÃN DEL CHATBOT\n              </CardTitle>\n              <CardDescription>\n                Ajusta el comportamiento y parÃ¡metros del asistente virtual\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"active\"\n                  checked={config.isActive}\n                  onCheckedChange={(checked) => setConfig({...config, isActive: checked})}\n                />\n                <Label htmlFor=\"active\" className=\"font-mono\">CHATBOT ACTIVO</Label>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"welcome\" className=\"font-mono\">MENSAJE DE BIENVENIDA</Label>\n                <Textarea\n                  id=\"welcome\"\n                  value={config.welcomeMessage}\n                  onChange={(e) => setConfig({...config, welcomeMessage: e.target.value})}\n                  className=\"min-h-20\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"maxLength\" className=\"font-mono\">LONGITUD MÃXIMA RESPUESTA</Label>\n                  <Input\n                    id=\"maxLength\"\n                    type=\"number\"\n                    value={config.maxResponseLength}\n                    onChange={(e) => setConfig({...config, maxResponseLength: parseInt(e.target.value)})}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"delay\" className=\"font-mono\">RETRASO RESPUESTA (ms)</Label>\n                  <Input\n                    id=\"delay\"\n                    type=\"number\"\n                    value={config.responseDelay}\n                    onChange={(e) => setConfig({...config, responseDelay: parseInt(e.target.value)})}\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"learning\"\n                  checked={config.enableLearning}\n                  onCheckedChange={(checked) => setConfig({...config, enableLearning: checked})}\n                />\n                <Label htmlFor=\"learning\" className=\"font-mono\">HABILITAR APRENDIZAJE</Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"logging\"\n                  checked={config.logConversations}\n                  onCheckedChange={(checked) => setConfig({...config, logConversations: checked})}\n                />\n                <Label htmlFor=\"logging\" className=\"font-mono\">REGISTRAR CONVERSACIONES</Label>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"responses\">\n          <Card className=\"neon-border theme-card\">\n            <CardHeader>\n              <CardTitle className=\"font-mono\">GESTIÃN DE RESPUESTAS</CardTitle>\n              <CardDescription>\n                Agrega y modifica respuestas automÃ¡ticas del chatbot\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"keyword\" className=\"font-mono\">PALABRA CLAVE</Label>\n                  <Input\n                    id=\"keyword\"\n                    value={newKeyword}\n                    onChange={(e) => setNewKeyword(e.target.value)}\n                    placeholder=\"Ej: ransomware, crypto, etc.\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"font-mono\">RESPUESTA</Label>\n                  <Textarea\n                    value={newResponse}\n                    onChange={(e) => setNewResponse(e.target.value)}\n                    placeholder=\"Respuesta que darÃ¡ el chatbot...\"\n                    className=\"min-h-20\"\n                  />\n                </div>\n              </div>\n              <Button onClick={handleAddResponse} className=\"font-mono\">\n                AGREGAR RESPUESTA\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"logs\">\n          <Card className=\"neon-border theme-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center font-mono\">\n                <Bot className=\"w-5 h-5 mr-2\" />\n                REGISTRO DE CONVERSACIONES\n              </CardTitle>\n              <CardDescription>\n                Historial de interacciones con el chatbot\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"font-mono\">USUARIO</TableHead>\n                    <TableHead className=\"font-mono\">MENSAJE</TableHead>\n                    <TableHead className=\"font-mono\">RESPUESTA</TableHead>\n                    <TableHead className=\"font-mono\">FECHA</TableHead>\n                    <TableHead className=\"font-mono\">CALIFICACIÃN</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {conversations.map((conv) => (\n                    <TableRow key={conv.id}>\n                      <TableCell className=\"font-mono\">{conv.usuario}</TableCell>\n                      <TableCell className=\"font-mono max-w-xs truncate\">{conv.mensaje}</TableCell>\n                      <TableCell className=\"font-mono max-w-xs truncate\">{conv.respuesta}</TableCell>\n                      <TableCell className=\"font-mono\">{conv.fecha}</TableCell>\n                      <TableCell className=\"font-mono\">\n                        {conv.calificacion ? `${conv.calificacion}/5` : \"-\"}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":12747},"client/src/components/Dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  FolderOpen, \n  DollarSign, \n  AlertTriangle, \n  CheckCircle,\n  Plus,\n  Edit,\n  Check,\n  Users,\n  FileText,\n  Bot,\n  ArrowLeft\n} from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { UserAdministration } from \"./UserAdministration\";\nimport { ReportAdministration } from \"./ReportAdministration\";\nimport { ChatbotAdministration } from \"./ChatbotAdministration\";\n\nexport function Dashboard() {\n  const [currentView, setCurrentView] = useState<\"main\" | \"users\" | \"reports\" | \"chatbot\">(\"main\");\n  const { toast } = useToast();\n\n  const { data: stats, isLoading, error } = useQuery<{\n    totalCases: number;\n    totalAmount: string;\n    activeCases: number;\n    resolvedCases: number;\n    crimeTypeStats: { type: string; count: number }[];\n  }>({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (error && isUnauthorizedError(error as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 bg-background min-h-screen\">\n        <div className=\"mb-8\">\n          <Skeleton className=\"h-8 w-64 mb-2\" />\n          <Skeleton className=\"h-4 w-96\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i} className=\"neon-border\">\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-12 w-12 rounded-lg mb-4\" />\n                <Skeleton className=\"h-4 w-24 mb-2\" />\n                <Skeleton className=\"h-8 w-16\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6 bg-background min-h-screen\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-destructive\">Error al cargar las estadÃ­sticas del dashboard</p>\n        </div>\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount: string | number) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return new Intl.NumberFormat('es-ES', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(num);\n  };\n\n  const statCards = [\n    {\n      title: \"TOTAL DE CASOS\",\n      value: stats?.totalCases || 0,\n      icon: FolderOpen,\n      iconColor: \"text-primary\",\n      change: \"+12%\",\n      changeText: \"desde el mes pasado\",\n      changeColor: \"text-accent\",\n    },\n    {\n      title: \"MONTO TOTAL\",\n      value: formatCurrency(stats?.totalAmount || 0),\n      icon: DollarSign,\n      iconColor: \"text-accent\",\n      change: \"+8%\",\n      changeText: \"desde el mes pasado\",\n      changeColor: \"text-accent\",\n    },\n    {\n      title: \"CASOS ACTIVOS\",\n      value: stats?.activeCases || 0,\n      icon: AlertTriangle,\n      iconColor: \"text-destructive\",\n      change: \"+3%\",\n      changeText: \"desde la semana pasada\",\n      changeColor: \"text-destructive\",\n    },\n    {\n      title: \"CASOS RESUELTOS\",\n      value: stats?.resolvedCases || 0,\n      icon: CheckCircle,\n      iconColor: \"text-primary\",\n      change: \"+15%\",\n      changeText: \"desde el mes pasado\",\n      changeColor: \"text-accent\",\n    },\n  ];\n\n  const recentActivities = [\n    {\n      icon: Plus,\n      iconColor: \"text-primary\",\n      title: \"NUEVO CASO AGREGADO #EXP-2024-0156\",\n      description: \"FRAUDE ELECTRÃNICO - MONTO: $45,000\",\n      time: \"HACE 2 HORAS\",\n    },\n    {\n      icon: Check,\n      iconColor: \"text-accent\",\n      title: \"CASO RESUELTO #EXP-2024-0143\",\n      description: \"ESTAFA BANCARIA - RECUPERADO: $12,500\",\n      time: \"HACE 4 HORAS\",\n    },\n    {\n      icon: Edit,\n      iconColor: \"text-muted-foreground\",\n      title: \"ACTUALIZACIÃN DE CASO #EXP-2024-0134\",\n      description: \"NUEVA INFORMACIÃN DE PESQUISA AGREGADA\",\n      time: \"HACE 6 HORAS\",\n    },\n  ];\n\n  // Renderizar las diferentes vistas\n  if (currentView === \"users\") {\n    return (\n      <div className=\"p-6 bg-background min-h-screen\">\n        <div className=\"mb-6\">\n          <Button\n            onClick={() => setCurrentView(\"main\")}\n            variant=\"outline\"\n            className=\"font-mono neon-border\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            VOLVER AL DASHBOARD\n          </Button>\n        </div>\n        <UserAdministration />\n      </div>\n    );\n  }\n\n  if (currentView === \"reports\") {\n    return (\n      <div className=\"p-6 bg-background min-h-screen\">\n        <div className=\"mb-6\">\n          <Button\n            onClick={() => setCurrentView(\"main\")}\n            variant=\"outline\"\n            className=\"font-mono neon-border\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            VOLVER AL DASHBOARD\n          </Button>\n        </div>\n        <ReportAdministration />\n      </div>\n    );\n  }\n\n  if (currentView === \"chatbot\") {\n    return (\n      <div className=\"p-6 bg-background min-h-screen\">\n        <div className=\"mb-6\">\n          <Button\n            onClick={() => setCurrentView(\"main\")}\n            variant=\"outline\"\n            className=\"font-mono neon-border\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            VOLVER AL DASHBOARD\n          </Button>\n        </div>\n        <ChatbotAdministration />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 bg-background min-h-screen\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold matrix-text mb-2\">DASHBOARD DE CONTROL</h1>\n        <p className=\"text-muted-foreground font-mono\">Sistema de gestiÃ³n de delitos informÃ¡ticos</p>\n      </div>\n\n      {/* Botones de acceso a secciones administrativas */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n        <Card className=\"neon-border theme-card hover:bg-primary/5 transition-colors cursor-pointer\" onClick={() => setCurrentView(\"users\")}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-lg font-bold matrix-text font-mono\">ADMINISTRACIÃN</h3>\n                <p className=\"text-sm text-muted-foreground font-mono\">DE USUARIOS</p>\n              </div>\n              <Users className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"neon-border theme-card hover:bg-primary/5 transition-colors cursor-pointer\" onClick={() => setCurrentView(\"reports\")}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-lg font-bold matrix-text font-mono\">ADMINISTRACIÃN</h3>\n                <p className=\"text-sm text-muted-foreground font-mono\">DE PLANILLAS</p>\n              </div>\n              <FileText className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"neon-border theme-card hover:bg-primary/5 transition-colors cursor-pointer\" onClick={() => setCurrentView(\"chatbot\")}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-lg font-bold matrix-text font-mono\">ADMINISTRACIÃN</h3>\n                <p className=\"text-sm text-muted-foreground font-mono\">DE CHATBOT</p>\n              </div>\n              <Bot className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {statCards.map((stat, index) => {\n          const Icon = stat.icon;\n          return (\n            <Card key={index} className=\"neon-border theme-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground font-mono\">{stat.title}</p>\n                    <p data-testid={`stat-${stat.title.toLowerCase().replace(/\\s+/g, '-')}`} className=\"text-3xl font-bold text-foreground font-mono\">\n                      {stat.value}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-secondary rounded-lg flex items-center justify-center neon-border\">\n                    <Icon className={`${stat.iconColor} text-xl`} size={24} />\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center\">\n                  <span className={`text-sm font-medium font-mono ${stat.changeColor}`}>\n                    {stat.change}\n                  </span>\n                  <span className=\"text-muted-foreground text-sm ml-2 font-mono\">{stat.changeText}</span>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Charts Row */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        <Card className=\"neon-border theme-card\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"matrix-text font-mono\">[ CASOS POR MES ]</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"w-3 h-3 bg-primary rounded-full\"></span>\n                <span className=\"text-sm text-muted-foreground font-mono\">2024</span>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 flex items-center justify-center\">\n              <p className=\"text-muted-foreground font-mono\">&gt;&gt; GRÃFICO DE CASOS POR MES &lt;&lt;</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"neon-border theme-card\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"matrix-text font-mono\">[ TIPOS DE DELITO ]</CardTitle>\n              <button className=\"text-sm text-primary hover:text-primary/80 font-mono\">VER TODOS</button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              {stats?.crimeTypeStats && stats.crimeTypeStats.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {stats.crimeTypeStats.slice(0, 5).map((crime, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 rounded border border-border/50\">\n                      <span className=\"text-sm text-foreground font-mono\">{crime.type}</span>\n                      <span className=\"text-sm font-medium text-primary font-mono\">[{crime.count}]</span>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center h-full\">\n                  <p className=\"text-muted-foreground font-mono\">&gt;&gt; NO HAY DATOS DISPONIBLES &lt;&lt;</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <Card className=\"neon-border theme-card\">\n        <CardHeader>\n          <CardTitle className=\"matrix-text font-mono\">[ ACTIVIDAD RECIENTE ]</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {recentActivities.map((activity, index) => {\n              const Icon = activity.icon;\n              return (\n                <div key={index} className=\"flex items-start space-x-4 p-4 rounded border border-border/50 hover:bg-primary/5 transition-colors\">\n                  <div className=\"w-10 h-10 bg-secondary rounded-lg flex items-center justify-center neon-border\">\n                    <Icon className={`${activity.iconColor}`} size={20} />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-foreground font-mono\">{activity.title}</p>\n                    <p className=\"text-sm text-muted-foreground font-mono\">{activity.description}</p>\n                    <p className=\"text-xs text-muted-foreground font-mono mt-1\">{activity.time}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12994},"client/src/components/DataManagement.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Plus, \n  Search, \n  X, \n  Download, \n  Edit, \n  Trash2,\n  ChevronLeft,\n  ChevronRight\n} from \"lucide-react\";\nimport { CaseModal } from \"./CaseModal\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { CyberCase } from \"@shared/schema\";\n\ninterface CasesResponse {\n  cases: CyberCase[];\n  total: number;\n}\n\nexport function DataManagement() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingCase, setEditingCase] = useState<CyberCase | null>(null);\n  const [filters, setFilters] = useState({\n    search: \"\",\n    crimeType: \"\",\n    dateFrom: \"\",\n    dateTo: \"\",\n    page: 1,\n    limit: 10,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: casesData, isLoading, error } = useQuery<CasesResponse>({\n    queryKey: [\"/api/cyber-cases\", filters],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (error && isUnauthorizedError(error as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/cyber-cases/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cyber-cases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Ãxito\",\n        description: \"Caso eliminado correctamente\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar el caso\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({\n      ...prev,\n      [key]: value,\n      page: 1, // Reset to first page when filtering\n    }));\n  };\n\n  const handleClearFilters = () => {\n    setFilters({\n      search: \"\",\n      crimeType: \"\",\n      dateFrom: \"\",\n      dateTo: \"\",\n      page: 1,\n      limit: 10,\n    });\n  };\n\n  const handleEditCase = (caseData: CyberCase) => {\n    setEditingCase(caseData);\n    setIsModalOpen(true);\n  };\n\n  const handleDeleteCase = (id: string) => {\n    if (window.confirm(\"Â¿EstÃ¡ seguro de que desea eliminar este caso?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingCase(null);\n  };\n\n  const getCrimeTypeBadgeColor = (type: string) => {\n    const colors = {\n      \"Hacking\": \"bg-red-100 text-red-800\",\n      \"Phishing\": \"bg-orange-100 text-orange-800\",\n      \"Malware\": \"bg-purple-100 text-purple-800\",\n      \"Ransomware\": \"bg-gray-100 text-gray-800\",\n      \"Fraude cibernÃ©tico\": \"bg-blue-100 text-blue-800\",\n      \"Robo de identidad\": \"bg-yellow-100 text-yellow-800\",\n      \"Ciberacoso\": \"bg-pink-100 text-pink-800\",\n      \"SuplantaciÃ³n de identidad\": \"bg-indigo-100 text-indigo-800\",\n    };\n    return colors[type as keyof typeof colors] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getInvestigationStatusBadge = (status: string) => {\n    const statusMap = {\n      \"Pendiente\": \"bg-yellow-100 text-yellow-800\",\n      \"En proceso\": \"bg-blue-100 text-blue-800\",\n      \"Completado\": \"bg-green-100 text-green-800\",\n      \"Sin respuesta\": \"bg-red-100 text-red-800\",\n      \"Rechazado\": \"bg-gray-100 text-gray-800\",\n    };\n    return statusMap[status as keyof typeof statusMap] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const formatCurrency = (amount: string) => {\n    const num = parseFloat(amount);\n    return new Intl.NumberFormat('es-ES', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(num);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('es-ES');\n  };\n\n  const totalPages = Math.ceil((casesData?.total || 0) / filters.limit);\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"mb-8\">\n          <Skeleton className=\"h-8 w-64 mb-2\" />\n          <Skeleton className=\"h-4 w-96\" />\n        </div>\n        <div className=\"space-y-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                {Array.from({ length: 4 }).map((_, i) => (\n                  <Skeleton key={i} className=\"h-10\" />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-0\">\n              <div className=\"space-y-4 p-6\">\n                {Array.from({ length: 5 }).map((_, i) => (\n                  <Skeleton key={i} className=\"h-16 w-full\" />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-red-600\">Error al cargar los datos</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-8 flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-2\">GestiÃ³n de Datos</h2>\n          <p className=\"text-gray-600\">Administre todos los casos de delitos informÃ¡ticos</p>\n        </div>\n        <Button\n          data-testid=\"button-new-case\"\n          onClick={() => setIsModalOpen(true)}\n          className=\"mt-4 sm:mt-0\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Nuevos Datos\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"search\">Buscar</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"search\"\n                  data-testid=\"input-search\"\n                  placeholder=\"Buscar por expediente, delito...\"\n                  value={filters.search}\n                  onChange={(e) => handleFilterChange(\"search\", e.target.value)}\n                  className=\"pl-10\"\n                />\n                <Search className=\"w-4 h-4 absolute left-3 top-3 text-gray-400\" />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"crimeType\">Tipo de Delito</Label>\n              <Select\n                value={filters.crimeType}\n                onValueChange={(value) => handleFilterChange(\"crimeType\", value)}\n              >\n                <SelectTrigger data-testid=\"select-crime-type\">\n                  <SelectValue placeholder=\"Todos los delitos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">Todos los delitos</SelectItem>\n                  <SelectItem value=\"Hacking\">Hacking</SelectItem>\n                  <SelectItem value=\"Phishing\">Phishing</SelectItem>\n                  <SelectItem value=\"Malware\">Malware</SelectItem>\n                  <SelectItem value=\"Ransomware\">Ransomware</SelectItem>\n                  <SelectItem value=\"Fraude cibernÃ©tico\">Fraude cibernÃ©tico</SelectItem>\n                  <SelectItem value=\"Robo de identidad\">Robo de identidad</SelectItem>\n                  <SelectItem value=\"Ciberacoso\">Ciberacoso</SelectItem>\n                  <SelectItem value=\"SuplantaciÃ³n de identidad\">SuplantaciÃ³n de identidad</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"dateFrom\">Fecha Desde</Label>\n              <Input\n                id=\"dateFrom\"\n                data-testid=\"input-date-from\"\n                type=\"date\"\n                value={filters.dateFrom}\n                onChange={(e) => handleFilterChange(\"dateFrom\", e.target.value)}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"dateTo\">Fecha Hasta</Label>\n              <Input\n                id=\"dateTo\"\n                data-testid=\"input-date-to\"\n                type=\"date\"\n                value={filters.dateTo}\n                onChange={(e) => handleFilterChange(\"dateTo\", e.target.value)}\n              />\n            </div>\n          </div>\n\n          <div className=\"mt-4 flex flex-wrap gap-2\">\n            <Button data-testid=\"button-clear\" variant=\"outline\" onClick={handleClearFilters}>\n              <X className=\"w-4 h-4 mr-2\" />\n              Limpiar Filtros\n            </Button>\n            <Button data-testid=\"button-export\" variant=\"outline\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Exportar\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Data Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50 border-b border-gray-200\">\n                <tr>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    Fecha\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    NÂ° de Expediente\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    Delito\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    VÃ­ctima\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    Estado\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    Monto SustraÃ­do\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                    Acciones\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {!casesData?.cases || casesData.cases.length === 0 ? (\n                  <tr>\n                    <td colSpan={7} className=\"px-6 py-12 text-center text-gray-500\">\n                      No se encontraron casos que coincidan con los filtros\n                    </td>\n                  </tr>\n                ) : (\n                  casesData.cases.map((caseItem: CyberCase) => (\n                    <tr key={caseItem.id} className=\"hover:bg-gray-50 transition-colors\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {formatDate(caseItem.caseDate)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className=\"text-sm font-medium text-primary\">\n                          {caseItem.expedientNumber}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <Badge className={getCrimeTypeBadgeColor(caseItem.crimeType)}>\n                          {caseItem.crimeType}\n                        </Badge>\n                      </td>\n                      <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">{caseItem.victim}</td>\n                      <td className=\"px-6 py-4 text-sm text-gray-900\">\n                        <Badge className={getInvestigationStatusBadge(caseItem.investigationStatus)}>\n                          {caseItem.investigationStatus}\n                        </Badge>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                        {formatCurrency(caseItem.stolenAmount)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-right\">\n                        <div className=\"flex space-x-1\">\n                          <Button\n                            data-testid={`button-edit-${caseItem.id}`}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEditCase(caseItem)}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            data-testid={`button-delete-${caseItem.id}`}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteCase(caseItem.id)}\n                            disabled={deleteMutation.isPending}\n                            className=\"text-red-600 hover:text-red-700\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Pagination */}\n          {(casesData?.total ?? 0) > 0 && (\n            <div className=\"bg-gray-50 px-6 py-4 border-t border-gray-200 flex items-center justify-between\">\n              <div className=\"flex items-center text-sm text-gray-600\">\n                Mostrando{\" \"}\n                <span className=\"font-medium text-gray-900 mx-1\">\n                  {((filters.page - 1) * filters.limit) + 1}-{Math.min(filters.page * filters.limit, casesData?.total || 0)}\n                </span>{\" \"}\n                de{\" \"}\n                <span className=\"font-medium text-gray-900 ml-1\">{casesData?.total || 0}</span>{\" \"}\n                resultados\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  data-testid=\"button-prev-page\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setFilters(prev => ({ ...prev, page: prev.page - 1 }))}\n                  disabled={filters.page <= 1}\n                >\n                  <ChevronLeft className=\"w-4 h-4\" />\n                  Anterior\n                </Button>\n                <span className=\"text-sm text-gray-600\">\n                  PÃ¡gina {filters.page} de {totalPages}\n                </span>\n                <Button\n                  data-testid=\"button-next-page\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setFilters(prev => ({ ...prev, page: prev.page + 1 }))}\n                  disabled={filters.page >= totalPages}\n                >\n                  Siguiente\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <CaseModal\n        isOpen={isModalOpen}\n        onClose={handleCloseModal}\n        editingCase={editingCase}\n      />\n    </div>\n  );\n}\n","size_bytes":16292},"client/src/components/DataManagementFast.tsx":{"content":"import { useState, useMemo, useCallback, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Plus, \n  Search, \n  Edit, \n  Trash2,\n  ChevronLeft,\n  ChevronRight,\n  Eye\n} from \"lucide-react\";\nimport { CaseModal } from \"./CaseModal\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { CyberCase } from \"@shared/schema\";\n\ninterface CasesResponse {\n  cases: CyberCase[];\n  total: number;\n  page: number;\n  totalPages: number;\n}\n\n// Use debounced search to reduce API calls\nfunction useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\nconst CRIME_TYPES = [\n  \"Hacking\", \"Phishing\", \"Malware\", \"Ransomware\", \n  \"Fraude cibernÃ©tico\", \"Robo de identidad\", \"Ciberacoso\", \"SuplantaciÃ³n de identidad\"\n];\n\nconst BADGE_COLORS = {\n  crimeType: {\n    \"Hacking\": \"bg-red-500/20 text-red-400 border-red-500/30\",\n    \"Phishing\": \"bg-orange-500/20 text-orange-400 border-orange-500/30\",\n    \"Malware\": \"bg-purple-500/20 text-purple-400 border-purple-500/30\",\n    \"Ransomware\": \"bg-pink-500/20 text-pink-400 border-pink-500/30\",\n    \"Fraude cibernÃ©tico\": \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\",\n    \"Robo de identidad\": \"bg-blue-500/20 text-blue-400 border-blue-500/30\",\n    \"Ciberacoso\": \"bg-cyan-500/20 text-cyan-400 border-cyan-500/30\",\n    \"SuplantaciÃ³n de identidad\": \"bg-green-500/20 text-green-400 border-green-500/30\",\n  },\n  status: {\n    \"Pendiente\": \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\",\n    \"En proceso\": \"bg-blue-500/20 text-blue-400 border-blue-500/30\", \n    \"Completado\": \"bg-green-500/20 text-green-400 border-green-500/30\",\n    \"Sin respuesta\": \"bg-gray-500/20 text-gray-400 border-gray-500/30\",\n    \"Rechazado\": \"bg-red-500/20 text-red-400 border-red-500/30\",\n  }\n} as const;\n\nexport function DataManagementFast() {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [editCase, setEditCase] = useState<CyberCase | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [search, setSearch] = useState(\"\");\n  const [crimeType, setCrimeType] = useState(\"todos\");\n  const [dateFrom, setDateFrom] = useState(\"\");\n  const [dateTo, setDateTo] = useState(\"\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Debounce search to avoid too many API calls\n  const debouncedSearch = useDebounce(search, 300);\n  \n  const limit = 20; // Items per page\n\n  // Build query key for caching\n  const queryKey = useMemo(() => [\n    \"/api/cyber-cases\", \n    currentPage, \n    limit, \n    debouncedSearch, \n    crimeType, \n    dateFrom, \n    dateTo\n  ], [currentPage, limit, debouncedSearch, crimeType, dateFrom, dateTo]);\n\n  // Fetch cases with optimized query\n  const { data, isLoading, error } = useQuery<CasesResponse>({\n    queryKey,\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        page: currentPage.toString(),\n        limit: limit.toString(),\n        ...(debouncedSearch && { search: debouncedSearch }),\n        ...(crimeType !== \"todos\" && { crimeType }),\n        ...(dateFrom && { dateFrom }),\n        ...(dateTo && { dateTo })\n      });\n      \n      const response = await fetch(`/api/cyber-cases?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch cases');\n      return response.json();\n    },\n    staleTime: 30000, // Cache for 30 seconds\n    retry: 2,\n  });\n\n  // Optimized mutations\n  const createMutation = useMutation({\n    mutationFn: (newCase: any) =>\n      apiRequest(\"/api/cyber-cases\", \"POST\", newCase),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cyber-cases\"] });\n      toast({ title: \"Caso creado exitosamente\" });\n    },\n    onError: () => {\n      toast({ title: \"Error al crear caso\", variant: \"destructive\" });\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) =>\n      apiRequest(`/api/cyber-cases/${id}`, \"PUT\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cyber-cases\"] });\n      toast({ title: \"Caso actualizado exitosamente\" });\n    },\n    onError: () => {\n      toast({ title: \"Error al actualizar caso\", variant: \"destructive\" });\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(`/api/cyber-cases/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cyber-cases\"] });\n      toast({ title: \"Caso eliminado exitosamente\" });\n    },\n    onError: () => {\n      toast({ title: \"Error al eliminar caso\", variant: \"destructive\" });\n    }\n  });\n\n  // Optimized handlers\n  const handleCreateCase = useCallback((caseData: any) => {\n    createMutation.mutate(caseData);\n    setModalOpen(false);\n    setEditCase(null);\n  }, [createMutation]);\n\n  const handleEditCase = useCallback((caseData: any) => {\n    if (!editCase?.id) return;\n    updateMutation.mutate({ id: editCase.id, data: caseData });\n    setModalOpen(false);\n    setEditCase(null);\n  }, [editCase?.id, updateMutation]);\n\n  const handleDeleteCase = useCallback((id: string) => {\n    if (confirm(\"Â¿EstÃ¡ seguro de que desea eliminar este caso?\")) {\n      deleteMutation.mutate(id);\n    }\n  }, [deleteMutation]);\n\n  const resetFilters = useCallback(() => {\n    setSearch(\"\");\n    setCrimeType(\"todos\");\n    setDateFrom(\"\");\n    setDateTo(\"\");\n    setCurrentPage(1);\n  }, []);\n\n  // Memoized components for performance\n  const CaseRow = useMemo(() => ({ cyberCase }: { cyberCase: CyberCase }) => (\n    <tr key={cyberCase.id} className=\"border-b border-border/20 hover:bg-primary/5 transition-colors\">\n      <td className=\"p-3 font-mono text-sm\">{cyberCase.expedientNumber}</td>\n      <td className=\"p-3\">\n        <Badge className={`${BADGE_COLORS.crimeType[cyberCase.crimeType as keyof typeof BADGE_COLORS.crimeType] || 'bg-gray-500/20 text-gray-400 border-gray-500/30'} font-mono text-xs`}>\n          {cyberCase.crimeType}\n        </Badge>\n      </td>\n      <td className=\"p-3 font-mono text-sm max-w-xs truncate\">{cyberCase.victim}</td>\n      <td className=\"p-3 font-mono text-sm\">${cyberCase.stolenAmount?.toLocaleString() || \"0\"}</td>\n      <td className=\"p-3\">\n        <Badge className={`${BADGE_COLORS.status[cyberCase.investigationStatus as keyof typeof BADGE_COLORS.status] || 'bg-gray-500/20 text-gray-400 border-gray-500/30'} font-mono text-xs`}>\n          {cyberCase.investigationStatus}\n        </Badge>\n      </td>\n      <td className=\"p-3 font-mono text-sm\">{cyberCase.caseDate}</td>\n      <td className=\"p-3\">\n        <div className=\"flex space-x-1\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => {\n              setEditCase(cyberCase);\n              setModalOpen(true);\n            }}\n            className=\"h-8 w-8 p-0 neon-border\"\n          >\n            <Edit className=\"h-3 w-3\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"h-8 w-8 p-0 neon-border\"\n          >\n            <Eye className=\"h-3 w-3\" />\n          </Button>\n          <Button\n            variant=\"destructive\"\n            size=\"sm\"\n            onClick={() => handleDeleteCase(cyberCase.id)}\n            className=\"h-8 w-8 p-0\"\n          >\n            <Trash2 className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </td>\n    </tr>\n  ), [handleDeleteCase]);\n\n  if (error) {\n    return (\n      <div className=\"p-6 text-center\">\n        <p className=\"text-destructive font-mono\">Error al cargar casos</p>\n        <Button onClick={() => window.location.reload()} className=\"mt-4\">\n          Recargar\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-3xl font-bold matrix-text font-mono\">[ GESTIÃN DE CASOS ]</h2>\n          <p className=\"text-muted-foreground font-mono\">Sistema de casos de delitos informÃ¡ticos</p>\n        </div>\n        <Button\n          onClick={() => {\n            setEditCase(null);\n            setModalOpen(true);\n          }}\n          className=\"neon-border font-mono\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          NUEVO CASO\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"neon-border theme-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Buscar casos...\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={crimeType} onValueChange={setCrimeType}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Tipo de delito\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"todos\">Todos los tipos</SelectItem>\n                {CRIME_TYPES.map((type) => (\n                  <SelectItem key={type} value={type}>{type}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Input\n              type=\"date\"\n              value={dateFrom}\n              onChange={(e) => setDateFrom(e.target.value)}\n              placeholder=\"Desde\"\n            />\n            <Input\n              type=\"date\"\n              value={dateTo}\n              onChange={(e) => setDateTo(e.target.value)}\n              placeholder=\"Hasta\"\n            />\n            <Button onClick={resetFilters} variant=\"outline\" className=\"font-mono\">\n              LIMPIAR\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Cases Table */}\n      <Card className=\"neon-border theme-card\">\n        <CardContent className=\"p-0\">\n          {isLoading ? (\n            <div className=\"p-6 space-y-4\">\n              {Array.from({ length: 5 }).map((_, i) => (\n                <Skeleton key={i} className=\"h-16 w-full\" />\n              ))}\n            </div>\n          ) : (\n            <>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted/20\">\n                    <tr>\n                      <th className=\"p-3 text-left font-mono text-sm\">EXPEDIENTE</th>\n                      <th className=\"p-3 text-left font-mono text-sm\">DELITO</th>\n                      <th className=\"p-3 text-left font-mono text-sm\">DESCRIPCIÃN</th>\n                      <th className=\"p-3 text-left font-mono text-sm\">MONTO</th>\n                      <th className=\"p-3 text-left font-mono text-sm\">ESTADO</th>\n                      <th className=\"p-3 text-left font-mono text-sm\">FECHA</th>\n                      <th className=\"p-3 text-left font-mono text-sm\">ACCIONES</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {data?.cases.map((cyberCase) => (\n                      <CaseRow key={cyberCase.id} cyberCase={cyberCase} />\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n\n              {/* Pagination */}\n              {data && data.totalPages > 1 && (\n                <div className=\"flex items-center justify-between p-4 border-t border-border/20\">\n                  <div className=\"text-sm text-muted-foreground font-mono\">\n                    {data.cases.length} de {data.total} casos\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\n                      disabled={currentPage === 1}\n                      className=\"font-mono\"\n                    >\n                      <ChevronLeft className=\"w-4 h-4\" />\n                    </Button>\n                    <span className=\"text-sm font-mono\">\n                      {currentPage} / {data.totalPages}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(p => Math.min(data.totalPages, p + 1))}\n                      disabled={currentPage === data.totalPages}\n                      className=\"font-mono\"\n                    >\n                      <ChevronRight className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Modal */}\n      <CaseModal\n        isOpen={modalOpen}\n        onClose={() => {\n          setModalOpen(false);\n          setEditCase(null);\n        }}\n        onSubmit={editCase ? handleEditCase : handleCreateCase}\n        initialData={editCase}\n        isLoading={createMutation.isPending || updateMutation.isPending}\n      />\n    </div>\n  );\n}","size_bytes":13774},"client/src/components/DataManagementOptimized.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Plus, \n  Search, \n  X, \n  Edit, \n  Trash2,\n  ChevronLeft,\n  ChevronRight,\n  Eye\n} from \"lucide-react\";\nimport { CaseModal } from \"./CaseModal\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { CyberCase } from \"@shared/schema\";\n\ninterface CasesResponse {\n  cases: CyberCase[];\n  total: number;\n}\n\ninterface FilterState {\n  search: string;\n  crimeType: string;\n  dateFrom: string;\n  dateTo: string;\n  page: number;\n  limit: number;\n}\n\nconst CRIME_TYPES = [\n  \"Hacking\",\n  \"Phishing\", \n  \"Malware\",\n  \"Ransomware\",\n  \"Fraude cibernÃ©tico\",\n  \"Robo de identidad\",\n  \"Ciberacoso\",\n  \"SuplantaciÃ³n de identidad\",\n];\n\nconst BADGE_COLORS = {\n  crimeType: {\n    \"Hacking\": \"badge-danger\",\n    \"Phishing\": \"badge-warning\", \n    \"Malware\": \"badge-danger\",\n    \"Ransomware\": \"badge-danger\",\n    \"Fraude cibernÃ©tico\": \"badge-warning\",\n    \"Robo de identidad\": \"badge-primary\",\n    \"Ciberacoso\": \"badge-warning\",\n    \"SuplantaciÃ³n de identidad\": \"badge-primary\",\n  },\n  status: {\n    \"Pendiente\": \"badge-warning\",\n    \"En proceso\": \"badge-primary\",\n    \"Completado\": \"badge-success\",\n    \"Sin respuesta\": \"badge-warning\",\n    \"Rechazado\": \"badge-danger\",\n  }\n} as const;\n\nexport function DataManagementOptimized() {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [editCase, setEditCase] = useState<CyberCase | null>(null);\n  const [filters, setFilters] = useState<FilterState>({\n    search: \"\",\n    crimeType: \"\",\n    dateFrom: \"\",\n    dateTo: \"\",\n    page: 1,\n    limit: 10,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: casesData, isLoading, error } = useQuery<CasesResponse>({\n    queryKey: [\"/api/cyber-cases\", filters],\n    retry: false,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/cyber-cases/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cyber-cases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({ title: \"Ãxito\", description: \"Caso eliminado correctamente\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"No se pudo eliminar el caso\", variant: \"destructive\" });\n    },\n  });\n\n  const updateFilter = (key: keyof FilterState, value: string | number) => {\n    setFilters(prev => ({ ...prev, [key]: value, ...(key !== 'page' && { page: 1 }) }));\n  };\n\n  const clearFilters = () => {\n    setFilters({ search: \"\", crimeType: \"\", dateFrom: \"\", dateTo: \"\", page: 1, limit: 10 });\n  };\n\n  const openEditModal = (caseData: CyberCase) => {\n    setModalOpen(false); // Asegurar que estÃ© cerrado primero\n    setTimeout(() => {\n      setEditCase(caseData);\n      setModalOpen(true);\n    }, 50);\n  };\n\n  const viewCase = (caseData: CyberCase) => {\n    // Para visualizar el caso, abrimos el modal en modo lectura\n    setModalOpen(false); // Asegurar que estÃ© cerrado primero\n    setTimeout(() => {\n      setEditCase({ ...caseData, readOnly: true } as any);\n      setModalOpen(true);\n    }, 50);\n  };\n\n  const closeModal = () => {\n    setModalOpen(false);\n    setEditCase(null);\n  };\n\n  const confirmDelete = (id: string) => {\n    if (window.confirm(\"Â¿EstÃ¡ seguro de que desea eliminar este caso?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('es-ES', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n    }).format(parseFloat(amount));\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('es-ES');\n  };\n\n  const getBadgeColor = (type: 'crimeType' | 'status', value: string) => {\n    return BADGE_COLORS[type][value as keyof typeof BADGE_COLORS[typeof type]] || \"badge-rejected\";\n  };\n\n  const totalPages = Math.ceil((casesData?.total || 0) / filters.limit);\n  const hasResults = casesData && casesData.cases.length > 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-6 bg-background min-h-screen\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <Skeleton className=\"h-8 w-64 mb-2\" />\n            <Skeleton className=\"h-4 w-96\" />\n          </div>\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              {Array.from({ length: 4 }).map((_, i) => (\n                <Skeleton key={i} className=\"h-10\" />\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6 space-y-4\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-16 w-full\" />\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-red-600\">Error al cargar los datos</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6 bg-background min-h-screen\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-primary-custom font-mono\">[ GESTIÃN DE CASOS ]</h2>\n          <p className=\"text-primary-custom/70 font-mono\">Sistema de casos de delitos informÃ¡ticos</p>\n        </div>\n        <Button data-testid=\"button-new-case\" onClick={() => setModalOpen(true)} className=\"mt-4 sm:mt-0 btn-primary\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          NUEVO CASO\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"card-primary\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"w-4 h-4 absolute left-3 top-3 text-primary-custom\" />\n              <Input\n                data-testid=\"input-search\"\n                placeholder=\"Buscar por expediente...\"\n                value={filters.search}\n                onChange={(e) => updateFilter(\"search\", e.target.value)}\n                className=\"pl-10 input-primary\"\n              />\n            </div>\n\n            <Select value={filters.crimeType || \"todos\"} onValueChange={(value) => updateFilter(\"crimeType\", value === \"todos\" ? \"\" : value)}>\n              <SelectTrigger data-testid=\"select-crime-type\" className=\"input-primary\">\n                <SelectValue placeholder=\"Tipo de delito\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"todos\">Todos los delitos</SelectItem>\n                {CRIME_TYPES.map((type) => (\n                  <SelectItem key={type} value={type}>\n                    {type}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Input\n              data-testid=\"input-date-from\"\n              type=\"date\"\n              value={filters.dateFrom}\n              onChange={(e) => updateFilter(\"dateFrom\", e.target.value)}\n              placeholder=\"Fecha desde\"\n              className=\"input-primary\"\n            />\n\n            <Input\n              data-testid=\"input-date-to\"\n              type=\"date\"\n              value={filters.dateTo}\n              onChange={(e) => updateFilter(\"dateTo\", e.target.value)}\n              placeholder=\"Fecha hasta\"\n              className=\"input-primary\"\n            />\n          </div>\n\n          <div className=\"mt-4\">\n            <Button data-testid=\"button-clear\" variant=\"outline\" onClick={clearFilters} className=\"border-primary/30 text-primary-custom hover:bg-primary/10\">\n              <X className=\"w-4 h-4 mr-2\" />\n              LIMPIAR FILTROS\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Data Table */}\n      <Card className=\"card-primary\">\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full card-primary\">\n              <thead className=\"border-b\">\n                <tr>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold uppercase text-primary-custom bg-muted border-b border-primary/30\">FECHA</th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold uppercase text-primary-custom bg-muted border-b border-primary/30\">NÂ° EXPEDIENTE</th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold uppercase text-primary-custom bg-muted border-b border-primary/30\">DELITO</th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold uppercase text-primary-custom bg-muted border-b border-primary/30\">VÃCTIMA</th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold uppercase text-primary-custom bg-muted border-b border-primary/30\">ESTADO</th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold uppercase text-primary-custom bg-muted border-b border-primary/30\">MONTO</th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold uppercase text-primary-custom bg-muted border-b border-primary/30\">ACCIONES</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-primary/20\">\n                {!hasResults ? (\n                  <tr>\n                    <td colSpan={7} className=\"px-6 py-12 text-center text-primary-custom/70\">\n                      &gt;&gt; NO SE ENCONTRARON CASOS EN EL SISTEMA &lt;&lt;\n                    </td>\n                  </tr>\n                ) : (\n                  casesData.cases.map((caseItem) => (\n                    <tr key={caseItem.id} className=\"hover:bg-primary/10 transition-all duration-200 border-b border-primary/20\">\n                      <td className=\"px-6 py-4 text-sm text-foreground font-mono\">\n                        {formatDate(caseItem.caseDate)}\n                      </td>\n                      <td className=\"px-6 py-4\">\n                        <span className=\"text-sm font-medium text-primary-custom font-mono\">\n                          #{caseItem.expedientNumber}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4\">\n                        <Badge className={getBadgeColor('crimeType', caseItem.crimeType)}>\n                          {caseItem.crimeType}\n                        </Badge>\n                      </td>\n                      <td className=\"px-6 py-4 text-sm text-foreground max-w-xs truncate font-mono\">\n                        {caseItem.victim}\n                      </td>\n                      <td className=\"px-6 py-4\">\n                        <Badge className={getBadgeColor('status', caseItem.investigationStatus)}>\n                          {caseItem.investigationStatus}\n                        </Badge>\n                      </td>\n                      <td className=\"px-6 py-4 text-sm font-medium text-accent-custom font-mono\">\n                        {formatCurrency(caseItem.stolenAmount)}\n                      </td>\n                      <td className=\"px-6 py-4\">\n                        <Button\n                          data-testid={`button-delete-${caseItem.id}`}\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => confirmDelete(caseItem.id)}\n                          disabled={deleteMutation.isPending}\n                          className=\"text-destructive hover:text-destructive/80 hover:bg-destructive/10\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Pagination */}\n          {hasResults && totalPages > 1 && (\n            <div className=\"bg-muted px-6 py-4 border-t border-primary/30 flex items-center justify-between\">\n              <div className=\"text-sm text-primary-custom/70 font-mono\">\n                &gt;&gt; MOSTRANDO {((filters.page - 1) * filters.limit) + 1}-{Math.min(filters.page * filters.limit, casesData.total)} DE {casesData.total} REGISTROS\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  data-testid=\"button-prev-page\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => updateFilter(\"page\", filters.page - 1)}\n                  disabled={filters.page <= 1}\n                  className=\"border-primary/30 text-primary-custom hover:bg-primary/10\"\n                >\n                  <ChevronLeft className=\"w-4 h-4\" />\n                  ANTERIOR\n                </Button>\n                <span className=\"text-sm text-primary-custom font-mono\">\n                  [ {filters.page} / {totalPages} ]\n                </span>\n                <Button\n                  data-testid=\"button-next-page\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => updateFilter(\"page\", filters.page + 1)}\n                  disabled={filters.page >= totalPages}\n                  className=\"border-primary/30 text-primary-custom hover:bg-primary/10\"\n                >\n                  SIGUIENTE\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <CaseModal\n        isOpen={modalOpen}\n        onClose={closeModal}\n        onSubmit={() => {}}\n        initialData={editCase}\n      />\n    </div>\n  );\n}","size_bytes":14274},"client/src/components/Layout.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"./Sidebar\";\nimport { TopBar } from \"./TopBar\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n  currentSection: string;\n  onSectionChange: (section: string) => void;\n}\n\nexport function Layout({ children, currentSection, onSectionChange }: LayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const toggleSidebar = () => {\n    setSidebarOpen(!sidebarOpen);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Sidebar \n        isOpen={sidebarOpen}\n        onClose={() => setSidebarOpen(false)}\n        currentSection={currentSection}\n        onSectionChange={onSectionChange}\n      />\n      \n      <div className=\"lg:ml-64\">\n        <TopBar onMenuClick={toggleSidebar} currentSection={currentSection} />\n        <main className=\"pt-16 min-h-screen\">\n          {children}\n        </main>\n      </div>\n\n      {/* Mobile overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-20 lg:hidden\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":1135},"client/src/components/ReportAdministration.tsx":{"content":"import { useState } from \"react\";\nimport { FileText, Download, Calendar, Filter, Eye, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Report {\n  id: string;\n  nombre: string;\n  tipo: \"Resumen Mensual\" | \"AnÃ¡lisis de Casos\" | \"EstadÃ­sticas\" | \"Reporte Personalizado\";\n  fechaCreacion: string;\n  creadoPor: string;\n  estado: \"Generado\" | \"En Proceso\" | \"Error\";\n  formato: \"PDF\" | \"Excel\" | \"CSV\";\n  tamaÃ±o: string;\n}\n\nconst mockReports: Report[] = [\n  {\n    id: \"1\",\n    nombre: \"Resumen Delitos InformÃ¡ticos Enero 2025\",\n    tipo: \"Resumen Mensual\",\n    fechaCreacion: \"2025-01-15\",\n    creadoPor: \"Admin Sistema\",\n    estado: \"Generado\",\n    formato: \"PDF\",\n    tamaÃ±o: \"2.4 MB\"\n  },\n  {\n    id: \"2\",\n    nombre: \"AnÃ¡lisis Casos Phishing Q1 2025\",\n    tipo: \"AnÃ¡lisis de Casos\",\n    fechaCreacion: \"2025-01-14\",\n    creadoPor: \"MarÃ­a GonzÃ¡lez\",\n    estado: \"Generado\", \n    formato: \"Excel\",\n    tamaÃ±o: \"1.8 MB\"\n  },\n  {\n    id: \"3\",\n    nombre: \"EstadÃ­sticas Generales Sistema\",\n    tipo: \"EstadÃ­sticas\",\n    fechaCreacion: \"2025-01-13\",\n    creadoPor: \"Carlos RodrÃ­guez\",\n    estado: \"En Proceso\",\n    formato: \"PDF\",\n    tamaÃ±o: \"-\"\n  }\n];\n\nexport function ReportAdministration() {\n  const [reports, setReports] = useState<Report[]>(mockReports);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState<string>(\"todos\");\n\n  const { toast } = useToast();\n\n  const filteredReports = reports.filter(report => {\n    const matchesSearch = report.nombre.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         report.creadoPor.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = filterType === \"todos\" || report.tipo === filterType;\n    \n    return matchesSearch && matchesType;\n  });\n\n  const getEstadoBadgeVariant = (estado: string) => {\n    switch (estado) {\n      case \"Generado\": return \"default\";\n      case \"En Proceso\": return \"secondary\";\n      case \"Error\": return \"destructive\";\n      default: return \"secondary\";\n    }\n  };\n\n  const getTipoBadgeVariant = (tipo: string) => {\n    switch (tipo) {\n      case \"Resumen Mensual\": return \"default\";\n      case \"AnÃ¡lisis de Casos\": return \"secondary\";\n      case \"EstadÃ­sticas\": return \"outline\";\n      case \"Reporte Personalizado\": return \"destructive\";\n      default: return \"secondary\";\n    }\n  };\n\n  const handleDownload = (report: Report) => {\n    if (report.estado === \"Generado\") {\n      toast({\n        title: \"Descargando reporte\",\n        description: `Iniciando descarga de ${report.nombre}`,\n      });\n      // Simular descarga\n    } else {\n      toast({\n        title: \"Error\",\n        description: \"El reporte no estÃ¡ disponible para descarga\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleGenerateReport = () => {\n    const newReport: Report = {\n      id: Date.now().toString(),\n      nombre: `Reporte Personalizado ${new Date().toLocaleDateString()}`,\n      tipo: \"Reporte Personalizado\",\n      fechaCreacion: new Date().toISOString().split('T')[0],\n      creadoPor: \"Admin Sistema\",\n      estado: \"En Proceso\",\n      formato: \"PDF\",\n      tamaÃ±o: \"-\"\n    };\n\n    setReports([newReport, ...reports]);\n    \n    // Simular generaciÃ³n de reporte\n    setTimeout(() => {\n      setReports(prev => prev.map(report => \n        report.id === newReport.id \n          ? { ...report, estado: \"Generado\" as const, tamaÃ±o: \"3.2 MB\" }\n          : report\n      ));\n      toast({\n        title: \"Reporte generado\",\n        description: \"El reporte ha sido generado exitosamente\",\n      });\n    }, 3000);\n\n    toast({\n      title: \"Generando reporte\",\n      description: \"El reporte se estÃ¡ generando, esto puede tomar unos minutos\",\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-3xl font-bold matrix-text font-mono\">ADMINISTRACIÃN DE PLANILLAS</h2>\n          <p className=\"text-muted-foreground font-mono\">GestiÃ³n de reportes y planillas del sistema</p>\n        </div>\n        <Button onClick={handleGenerateReport} className=\"neon-border font-mono\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          GENERAR REPORTE\n        </Button>\n      </div>\n\n      <Card className=\"neon-border theme-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center font-mono\">\n            <FileText className=\"w-5 h-5 mr-2 text-primary\" />\n            CONTROL DE PLANILLAS Y REPORTES\n          </CardTitle>\n          <CardDescription>\n            GestiÃ³n y seguimiento de reportes generados por el sistema\n          </CardDescription>\n          \n          {/* Filtros */}\n          <div className=\"flex flex-wrap gap-4 items-center\">\n            <Input\n              placeholder=\"Buscar reportes...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"max-w-sm\"\n            />\n            <Select value={filterType} onValueChange={setFilterType}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Tipo de reporte\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"todos\">Todos los tipos</SelectItem>\n                <SelectItem value=\"Resumen Mensual\">Resumen Mensual</SelectItem>\n                <SelectItem value=\"AnÃ¡lisis de Casos\">AnÃ¡lisis de Casos</SelectItem>\n                <SelectItem value=\"EstadÃ­sticas\">EstadÃ­sticas</SelectItem>\n                <SelectItem value=\"Reporte Personalizado\">Reporte Personalizado</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button variant=\"outline\" className=\"font-mono\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              FILTROS AVANZADOS\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"font-mono\">NOMBRE</TableHead>\n                <TableHead className=\"font-mono\">TIPO</TableHead>\n                <TableHead className=\"font-mono\">FECHA</TableHead>\n                <TableHead className=\"font-mono\">CREADO POR</TableHead>\n                <TableHead className=\"font-mono\">ESTADO</TableHead>\n                <TableHead className=\"font-mono\">FORMATO</TableHead>\n                <TableHead className=\"font-mono\">TAMAÃO</TableHead>\n                <TableHead className=\"font-mono\">ACCIONES</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredReports.map((report) => (\n                <TableRow key={report.id}>\n                  <TableCell className=\"font-mono max-w-xs truncate\">{report.nombre}</TableCell>\n                  <TableCell>\n                    <Badge variant={getTipoBadgeVariant(report.tipo)} className=\"font-mono\">\n                      {report.tipo}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"font-mono\">{report.fechaCreacion}</TableCell>\n                  <TableCell className=\"font-mono\">{report.creadoPor}</TableCell>\n                  <TableCell>\n                    <Badge variant={getEstadoBadgeVariant(report.estado)} className=\"font-mono\">\n                      {report.estado}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"font-mono\">{report.formato}</TableCell>\n                  <TableCell className=\"font-mono\">{report.tamaÃ±o}</TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"font-mono\"\n                        disabled={report.estado !== \"Generado\"}\n                      >\n                        <Eye className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        variant=\"default\"\n                        size=\"sm\"\n                        onClick={() => handleDownload(report)}\n                        disabled={report.estado !== \"Generado\"}\n                        className=\"font-mono\"\n                      >\n                        <Download className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* EstadÃ­sticas de reportes */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"neon-border theme-card\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-mono\">REPORTES TOTALES</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold matrix-text\">{reports.length}</div>\n          </CardContent>\n        </Card>\n        <Card className=\"neon-border theme-card\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-mono\">GENERADOS</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-500\">\n              {reports.filter(r => r.estado === \"Generado\").length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card className=\"neon-border theme-card\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-mono\">EN PROCESO</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-500\">\n              {reports.filter(r => r.estado === \"En Proceso\").length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card className=\"neon-border theme-card\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-mono\">CON ERROR</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-500\">\n              {reports.filter(r => r.estado === \"Error\").length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10695},"client/src/components/Settings.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Save, RotateCcw, Palette, Monitor, Shield } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useTheme, type ThemeSettings } from \"@/hooks/useTheme\";\n\nconst colorOptions = [\n  { value: \"green\", label: \"VERDE MATRIX\", color: \"hsl(120, 100%, 45%)\" },\n  { value: \"blue\", label: \"AZUL CIBERNÃTICO\", color: \"hsl(200, 100%, 45%)\" },\n  { value: \"purple\", label: \"PÃRPURA TECH\", color: \"hsl(280, 100%, 45%)\" },\n  { value: \"red\", label: \"ROJO ALERT\", color: \"hsl(0, 100%, 45%)\" },\n  { value: \"orange\", label: \"NARANJA HACK\", color: \"hsl(30, 100%, 45%)\" },\n];\n\nconst secondaryColorOptions = [\n  { value: \"gray\", label: \"GRIS OSCURO\", color: \"hsl(0, 0%, 15%)\" },\n  { value: \"slate\", label: \"PIZARRA\", color: \"hsl(210, 40%, 20%)\" },\n  { value: \"zinc\", label: \"ZINC\", color: \"hsl(240, 4%, 20%)\" },\n  { value: \"stone\", label: \"PIEDRA\", color: \"hsl(25, 5%, 20%)\" },\n  { value: \"neutral\", label: \"NEUTRO\", color: \"hsl(0, 0%, 20%)\" },\n];\n\nexport function Settings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Use the centralized theme hook\n  const { settings, isLoading, applyThemeChanges, setSettings } = useTheme();\n\n  // Save settings mutation\n  const saveSettingsMutation = useMutation({\n    mutationFn: async (settingsToSave: ThemeSettings) => {\n      const response = await fetch(\"/api/user/settings\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(settingsToSave),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to save settings\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/settings\"] });\n      toast({\n        title: \"CONFIGURACIÃN GUARDADA\",\n        description: \"Los cambios se han aplicado exitosamente\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"ERROR AL GUARDAR\",\n        description: \"No se pudieron guardar las configuraciones\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    applyThemeChanges(settings);\n    saveSettingsMutation.mutate(settings);\n  };\n\n  const handleReset = () => {\n    const defaultSettings: ThemeSettings = {\n      primaryColor: \"green\",\n      secondaryColor: \"gray\",\n      transparency: 85,\n      neonEffects: false,\n      fontSize: 14,\n      animations: false,\n    };\n    setSettings(defaultSettings);\n    applyThemeChanges(defaultSettings);\n    saveSettingsMutation.mutate(defaultSettings);\n    toast({\n      title: \"CONFIGURACIÃN RESTABLECIDA\",\n      description: \"Se han restaurado los valores por defecto\",\n    });\n  };\n\n  const updateSetting = <K extends keyof ThemeSettings>(key: K, value: ThemeSettings[K]) => {\n    const newSettings = { ...settings, [key]: value };\n    setSettings(newSettings);\n    applyThemeChanges(newSettings);\n  };\n\n  return (\n    <div className=\"p-6 bg-background min-h-screen\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold matrix-text mb-2\">CONFIGURACIÃN DEL SISTEMA</h1>\n        <p className=\"text-muted-foreground font-mono\">Personaliza la apariencia y comportamiento del sistema</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Theme Settings */}\n        <Card className=\"neon-border theme-card\">\n          <CardHeader>\n            <CardTitle className=\"matrix-text font-mono flex items-center gap-2\">\n              <Palette className=\"w-5 h-5\" />\n              CONFIGURACIÃN VISUAL\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Primary Color */}\n            <div className=\"space-y-3\">\n              <Label className=\"text-sm font-medium font-mono\">COLOR PRIMARIO</Label>\n              <Select value={settings.primaryColor} onValueChange={(value) => updateSetting(\"primaryColor\", value)}>\n                <SelectTrigger className=\"neon-border font-mono\">\n                  <SelectValue>\n                    <div className=\"flex items-center gap-3\">\n                      <div \n                        className=\"w-4 h-4 rounded border border-border\" \n                        style={{ backgroundColor: colorOptions.find(opt => opt.value === settings.primaryColor)?.color || \"#00ff00\" }}\n                      />\n                      {colorOptions.find(opt => opt.value === settings.primaryColor)?.label || \"VERDE MATRIX\"}\n                    </div>\n                  </SelectValue>\n                </SelectTrigger>\n                <SelectContent className=\"theme-modal\">\n                  {colorOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value} className=\"font-mono\">\n                      <div className=\"flex items-center gap-3\">\n                        <div \n                          className=\"w-4 h-4 rounded border border-border\" \n                          style={{ backgroundColor: option.color }}\n                        />\n                        {option.label}\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Separator />\n\n            {/* Secondary Color */}\n            <div className=\"space-y-3\">\n              <Label className=\"text-sm font-medium font-mono\">COLOR SECUNDARIO</Label>\n              <Select value={settings.secondaryColor} onValueChange={(value) => updateSetting(\"secondaryColor\", value)}>\n                <SelectTrigger className=\"neon-border font-mono\">\n                  <SelectValue>\n                    <div className=\"flex items-center gap-3\">\n                      <div \n                        className=\"w-4 h-4 rounded border border-border\" \n                        style={{ backgroundColor: secondaryColorOptions.find(opt => opt.value === settings.secondaryColor)?.color || \"hsl(0, 0%, 15%)\" }}\n                      />\n                      {secondaryColorOptions.find(opt => opt.value === settings.secondaryColor)?.label || \"GRIS OSCURO\"}\n                    </div>\n                  </SelectValue>\n                </SelectTrigger>\n                <SelectContent className=\"theme-modal\">\n                  {secondaryColorOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value} className=\"font-mono\">\n                      <div className=\"flex items-center gap-3\">\n                        <div \n                          className=\"w-4 h-4 rounded border border-border\" \n                          style={{ backgroundColor: option.color }}\n                        />\n                        {option.label}\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Separator />\n\n            {/* Transparency */}\n            <div className=\"space-y-3\">\n              <Label className=\"text-sm font-medium font-mono\">\n                OPACIDAD DE COMPONENTES: {settings.transparency}%\n              </Label>\n              <Slider\n                value={[settings.transparency]}\n                onValueChange={(value) => updateSetting(\"transparency\", value[0])}\n                max={100}\n                min={50}\n                step={5}\n                className=\"w-full\"\n              />\n              <p className=\"text-xs text-muted-foreground font-mono\">\n                Controla la transparencia de los paneles y modales\n              </p>\n            </div>\n\n            <Separator />\n\n            {/* Font Size */}\n            <div className=\"space-y-3\">\n              <Label className=\"text-sm font-medium font-mono\">\n                TAMAÃO DE FUENTE: {settings.fontSize}px\n              </Label>\n              <Slider\n                value={[settings.fontSize]}\n                onValueChange={(value) => updateSetting(\"fontSize\", value[0])}\n                max={18}\n                min={12}\n                step={1}\n                className=\"w-full\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Effects Settings */}\n        <Card className=\"neon-border theme-card\">\n          <CardHeader>\n            <CardTitle className=\"matrix-text font-mono flex items-center gap-2\">\n              <Monitor className=\"w-5 h-5\" />\n              EFECTOS Y COMPORTAMIENTO\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Neon Effects */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <Label className=\"text-sm font-medium font-mono\">EFECTOS NEÃN</Label>\n                <p className=\"text-xs text-muted-foreground font-mono\">\n                  Bordes y resplandores cibernÃ©ticos\n                </p>\n              </div>\n              <Switch\n                checked={settings.neonEffects}\n                onCheckedChange={(checked) => updateSetting(\"neonEffects\", checked)}\n              />\n            </div>\n\n            <Separator />\n\n            {/* Animations */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <Label className=\"text-sm font-medium font-mono\">ANIMACIONES</Label>\n                <p className=\"text-xs text-muted-foreground font-mono\">\n                  Transiciones y efectos animados\n                </p>\n              </div>\n              <Switch\n                checked={settings.animations}\n                onCheckedChange={(checked) => updateSetting(\"animations\", checked)}\n              />\n            </div>\n\n\n          </CardContent>\n        </Card>\n\n        {/* System Info */}\n        <Card className=\"neon-border theme-card lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"matrix-text font-mono flex items-center gap-2\">\n              <Shield className=\"w-5 h-5\" />\n              INFORMACIÃN DEL SISTEMA\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm font-mono\">\n              <div>\n                <p className=\"text-muted-foreground\">VERSIÃN:</p>\n                <p className=\"text-foreground\">CYBER-CRIME v2.1.0</p>\n              </div>\n              <div>\n                <p className=\"text-muted-foreground\">ÃLTIMA ACTUALIZACIÃN:</p>\n                <p className=\"text-foreground\">16 AGO 2025</p>\n              </div>\n              <div>\n                <p className=\"text-muted-foreground\">ESTADO:</p>\n                <p className=\"text-primary\">OPERATIVO</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex gap-4 mt-8\">\n        <Button onClick={handleSave} className=\"neon-border font-mono\">\n          <Save className=\"w-4 h-4 mr-2\" />\n          GUARDAR CONFIGURACIÃN\n        </Button>\n        <Button onClick={handleReset} variant=\"outline\" className=\"neon-border font-mono\">\n          <RotateCcw className=\"w-4 h-4 mr-2\" />\n          RESTABLECER\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":11731},"client/src/components/Sidebar.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { BarChart3, Database, Settings, LogOut, Shield, MessageCircle, Search } from \"lucide-react\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  currentSection: string;\n  onSectionChange: (section: string) => void;\n}\n\nconst navigation = [\n  { id: \"dashboard\", name: \"DASHBOARD\", icon: BarChart3 },\n  { id: \"data-management\", name: \"GESTIÃN DE CASOS\", icon: Database },\n  { id: \"intelligence\", name: \"INTELIGENCIA\", icon: Search },\n  { id: \"chatbot\", name: \"ASISTENTE IA\", icon: MessageCircle },\n  { id: \"settings\", name: \"CONFIGURACIÃN\", icon: Settings },\n];\n\nexport function Sidebar({ isOpen, onClose, currentSection, onSectionChange }: SidebarProps) {\n  const handleSectionClick = (sectionId: string) => {\n    onSectionChange(sectionId);\n    onClose(); // Close sidebar on mobile after selection\n  };\n\n  const handleLogout = async () => {\n    try {\n      const response = await fetch('/api/logout', { \n        method: 'POST',\n        credentials: 'include'\n      });\n      if (response.ok) {\n        window.location.href = '/';\n      } else {\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error al cerrar sesiÃ³n:', error);\n      window.location.href = '/';\n    }\n  };\n\n  return (\n    <div\n      className={cn(\n        \"fixed left-0 top-0 h-full w-64 theme-card shadow-lg transform transition-transform duration-300 z-30 neon-border\",\n        isOpen ? \"translate-x-0\" : \"-translate-x-full lg:translate-x-0\"\n      )}\n    >\n      <div className=\"p-6 border-b border-primary/30\">\n        <div className=\"flex items-center\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center neon-border\">\n            <Shield className=\"w-6 h-6 text-primary-foreground\" />\n          </div>\n          <div className=\"ml-3\">\n            <h2 className=\"text-lg font-semibold matrix-text font-mono\">[ CYBER-CRIME ]</h2>\n            <p className=\"text-xs text-muted-foreground font-mono\">SISTEMA FORENSE</p>\n          </div>\n        </div>\n      </div>\n\n      <nav className=\"mt-6\">\n        <ul className=\"space-y-1 px-3\">\n          {navigation.map((item) => {\n            const Icon = item.icon;\n            const isActive = currentSection === item.id;\n            \n            return (\n              <li key={item.id}>\n                <button\n                  data-testid={`nav-${item.id}`}\n                  onClick={() => handleSectionClick(item.id)}\n                  className={cn(\n                    \"w-full flex items-center px-4 py-3 text-left rounded-lg transition-colors group font-mono\",\n                    isActive\n                      ? \"bg-primary/20 text-primary-custom neon-border\"\n                      : \"text-muted-foreground hover:bg-primary/10 hover:text-foreground\"\n                  )}\n                >\n                  <Icon className={cn(\n                    \"w-5 h-5\",\n                    isActive ? \"text-primary-custom\" : \"text-muted-foreground group-hover:text-primary-custom\"\n                  )} />\n                  <span className=\"ml-3\">{item.name}</span>\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n\n      <div className=\"absolute bottom-0 left-0 right-0 p-4 border-t border-border\">\n        <button\n          data-testid=\"button-logout\"\n          onClick={handleLogout}\n          className=\"w-full flex items-center px-4 py-3 text-left rounded-lg hover:bg-destructive/20 transition-colors group font-mono\"\n        >\n          <LogOut className=\"w-5 h-5 text-muted-foreground group-hover:text-destructive\" />\n          <span className=\"ml-3 text-muted-foreground group-hover:text-destructive\">DESCONECTAR</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3779},"client/src/components/TopBar.tsx":{"content":"import { Bell, Menu, User, LogOut } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface TopBarProps {\n  onMenuClick: () => void;\n  currentSection: string;\n}\n\nconst sectionTitles = {\n  dashboard: \"[ DASHBOARD DE CONTROL ]\",\n  \"data-management\": \"[ BASE DE DATOS ]\",\n  settings: \"[ CONFIGURACIÃN ]\",\n  users: \"[ USUARIOS ]\",\n};\n\nexport function TopBar({ onMenuClick, currentSection }: TopBarProps) {\n  const { user } = useAuth() as { user: any };\n\n  return (\n    <div className=\"fixed top-0 left-0 lg:left-64 right-0 h-16 theme-card backdrop-blur-md shadow-sm border-b border-primary/30 z-20 neon-border\">\n      <div className=\"flex items-center justify-between h-full px-6\">\n        <div className=\"flex items-center\">\n          <button\n            data-testid=\"button-menu\"\n            onClick={onMenuClick}\n            className=\"lg:hidden p-2 rounded-md hover:bg-primary/10 neon-border transition-colors\"\n          >\n            <Menu className=\"w-6 h-6 text-muted-foreground\" />\n          </button>\n          <h1 className=\"ml-4 text-xl font-semibold matrix-text font-mono\">\n            {sectionTitles[currentSection as keyof typeof sectionTitles] || \"[ SISTEMA ]\"}\n          </h1>\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          <button \n            data-testid=\"button-notifications\"\n            className=\"p-2 rounded-full hover:bg-primary/10 relative neon-border transition-colors\"\n          >\n            <Bell className=\"w-5 h-5 text-primary-custom\" />\n            <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-primary rounded-full animate-pulse\"></span>\n          </button>\n\n          <div className=\"flex items-center\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center neon-border\">\n              {user?.profileImageUrl ? (\n                <img\n                  src={user.profileImageUrl}\n                  alt=\"Profile\"\n                  className=\"w-8 h-8 rounded-full object-cover\"\n                />\n              ) : (\n                <User className=\"w-4 h-4 text-white\" />\n              )}\n            </div>\n            <div className=\"ml-3 hidden sm:block\">\n              <p data-testid=\"text-username\" className=\"text-sm font-medium text-foreground font-mono\">\n                {user?.firstName || user?.lastName \n                  ? `${user.firstName || \"\"} ${user.lastName || \"\"}`.trim()\n                  : user?.email || \"USUARIO\"\n                }\n              </p>\n              <p className=\"text-xs text-muted-foreground font-mono\">ADMINISTRADOR</p>\n            </div>\n          </div>\n\n          <button\n            onClick={async () => {\n              try {\n                const response = await fetch('/api/logout', { \n                  method: 'POST',\n                  credentials: 'include'\n                });\n                if (response.ok) {\n                  window.location.href = '/api/login';\n                } else {\n                  window.location.reload();\n                }\n              } catch (error) {\n                console.error('Error al cerrar sesiÃ³n:', error);\n                window.location.href = '/api/login';\n              }\n            }}\n            data-testid=\"button-logout\"\n            className=\"p-2 rounded-full hover:bg-destructive/10 text-muted-foreground hover:text-destructive neon-button\"\n          >\n            <LogOut className=\"w-5 h-5\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3497},"client/src/components/UserAdministration.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Users, Plus, Edit, Trash2, Shield, UserCheck, Monitor, MapPin, Clock, Eye, EyeOff } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  role: \"admin\" | \"user\" | \"investigator\" | \"auditor\";\n  isActive: \"true\" | \"false\";\n  createdAt: string;\n  lastLoginAt?: string;\n  currentSession?: {\n    ipAddress: string;\n    deviceInfo: string;\n    browser: string;\n    os: string;\n  };\n}\n\ninterface UserSession {\n  id: string;\n  userId: string;\n  sessionId: string;\n  ipAddress: string;\n  userAgent: string;\n  deviceInfo: string;\n  browser: string;\n  os: string;\n  location: string;\n  loginAt: string;\n  logoutAt?: string;\n  isActive: \"true\" | \"false\";\n  user?: User;\n}\n\nexport function UserAdministration() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    role: \"user\" as User[\"role\"],\n    isActive: \"true\" as User[\"isActive\"]\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch users\n  const { data: users = [], isLoading: usersLoading } = useQuery({\n    queryKey: [\"/api/users\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/users\");\n      if (!response.ok) throw new Error(\"Failed to fetch users\");\n      return response.json();\n    }\n  });\n\n  // Fetch sessions\n  const { data: sessions = [], isLoading: sessionsLoading } = useQuery({\n    queryKey: [\"/api/sessions\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/sessions\");\n      if (!response.ok) throw new Error(\"Failed to fetch sessions\");\n      return response.json();\n    }\n  });\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: typeof formData) => {\n      const response = await fetch(\"/api/users\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(userData),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to create user\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({\n        title: \"Usuario creado\",\n        description: \"El usuario ha sido creado exitosamente\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Error al crear usuario\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Update user mutation\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, userData }: { id: string; userData: Partial<typeof formData> }) => {\n      const response = await fetch(`/api/users/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(userData),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to update user\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({\n        title: \"Usuario actualizado\",\n        description: \"El usuario ha sido actualizado exitosamente\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Error al actualizar usuario\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/users/${id}`, { method: \"DELETE\" });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to delete user\");\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Usuario eliminado\",\n        description: \"El usuario ha sido eliminado del sistema\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Error al eliminar usuario\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const filteredUsers = users.filter((user: User) =>\n    user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.username.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case \"admin\": return \"destructive\";\n      case \"investigator\": return \"default\";\n      case \"user\": return \"secondary\";\n      case \"auditor\": return \"outline\";\n      default: return \"secondary\";\n    }\n  };\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case \"admin\": return \"Administrador\";\n      case \"investigator\": return \"Investigador\";\n      case \"user\": return \"Usuario\";\n      case \"auditor\": return \"Auditor\";\n      default: return \"Usuario\";\n    }\n  };\n\n  const getEstadoBadgeVariant = (isActive: string) => {\n    return isActive === \"true\" ? \"default\" : \"secondary\";\n  };\n\n  const resetForm = () => {\n    setFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      role: \"user\",\n      isActive: \"true\"\n    });\n    setEditingUser(null);\n  };\n\n  const handleSubmit = () => {\n    if (!formData.email || !formData.username) {\n      toast({\n        title: \"Error\",\n        description: \"Usuario y email son obligatorios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!editingUser && !formData.password) {\n      toast({\n        title: \"Error\",\n        description: \"La contraseÃ±a es obligatoria para usuarios nuevos\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingUser) {\n      const updateData: Partial<typeof formData> = { ...formData };\n      if (!updateData.password) {\n        const { password, ...dataWithoutPassword } = updateData;\n        updateUserMutation.mutate({ id: editingUser.id, userData: dataWithoutPassword });\n      } else {\n        updateUserMutation.mutate({ id: editingUser.id, userData: updateData });\n      }\n    } else {\n      createUserMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (user: User) => {\n    setEditingUser(user);\n    setFormData({\n      username: user.username,\n      email: user.email,\n      password: \"\", // Never prefill password\n      role: user.role,\n      isActive: user.isActive\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Â¿EstÃ¡s seguro de que quieres eliminar este usuario?\")) {\n      deleteUserMutation.mutate(id);\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('es-ES');\n  };\n\n  const formatDateTime = (dateString: string) => {\n    return new Date(dateString).toLocaleString('es-ES');\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"border-l-4 border-primary pl-4\">\n        <h1 className=\"text-2xl font-bold font-mono tracking-tight\">ADMINISTRACIÃN DE USUARIOS</h1>\n        <p className=\"text-muted-foreground\">Gestiona usuarios del sistema y monitorea sesiones activas</p>\n      </div>\n\n      <Tabs defaultValue=\"users\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"users\" className=\"font-mono\">USUARIOS</TabsTrigger>\n          <TabsTrigger value=\"sessions\" className=\"font-mono\">SESIONES ACTIVAS</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"font-mono flex items-center gap-2\">\n                <Users className=\"w-5 h-5\" />\n                USUARIOS DEL SISTEMA\n              </CardTitle>\n              <CardDescription>\n                Administra cuentas de usuario y permisos de acceso\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <div className=\"relative w-72\">\n                  <Input\n                    placeholder=\"Buscar usuarios...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"font-mono\"\n                  />\n                </div>\n                <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button \n                      onClick={() => {\n                        resetForm();\n                        setIsDialogOpen(true);\n                      }}\n                      className=\"font-mono\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      NUEVO USUARIO\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"theme-modal\">\n                    <DialogHeader>\n                      <DialogTitle className=\"font-mono\">\n                        {editingUser ? \"EDITAR USUARIO\" : \"NUEVO USUARIO\"}\n                      </DialogTitle>\n                      <DialogDescription>\n                        {editingUser ? \"Modifica los datos del usuario\" : \"Agrega un nuevo usuario al sistema\"}\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"grid gap-4 py-4\">\n                      <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"username\" className=\"text-right font-mono\">\n                          Usuario\n                        </Label>\n                        <Input\n                          id=\"username\"\n                          value={formData.username}\n                          onChange={(e) => setFormData({...formData, username: e.target.value})}\n                          className=\"col-span-3\"\n                          placeholder=\"nombre_usuario\"\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"email\" className=\"text-right font-mono\">\n                          Email\n                        </Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={formData.email}\n                          onChange={(e) => setFormData({...formData, email: e.target.value})}\n                          className=\"col-span-3\"\n                          placeholder=\"usuario@cybercrime.com\"\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"password\" className=\"text-right font-mono\">\n                          ContraseÃ±a\n                        </Label>\n                        <div className=\"col-span-3 relative\">\n                          <Input\n                            id=\"password\"\n                            type={showPassword ? \"text\" : \"password\"}\n                            value={formData.password}\n                            onChange={(e) => setFormData({...formData, password: e.target.value})}\n                            placeholder={editingUser ? \"Dejar vacÃ­o para no cambiar\" : \"ContraseÃ±a\"}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                          >\n                            {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"role\" className=\"text-right font-mono\">\n                          Rol\n                        </Label>\n                        <Select value={formData.role} onValueChange={(value: User[\"role\"]) => setFormData({...formData, role: value})}>\n                          <SelectTrigger className=\"col-span-3\">\n                            <SelectValue placeholder=\"Seleccionar rol\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"admin\">Administrador</SelectItem>\n                            <SelectItem value=\"investigator\">Investigador</SelectItem>\n                            <SelectItem value=\"user\">Usuario</SelectItem>\n                            <SelectItem value=\"auditor\">Auditor</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"isActive\" className=\"text-right font-mono\">\n                          Estado\n                        </Label>\n                        <Select value={formData.isActive} onValueChange={(value: User[\"isActive\"]) => setFormData({...formData, isActive: value})}>\n                          <SelectTrigger className=\"col-span-3\">\n                            <SelectValue placeholder=\"Seleccionar estado\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"true\">Activo</SelectItem>\n                            <SelectItem value=\"false\">Inactivo</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    <DialogFooter>\n                      <Button \n                        type=\"submit\" \n                        onClick={handleSubmit}\n                        disabled={createUserMutation.isPending || updateUserMutation.isPending}\n                        className=\"font-mono\"\n                      >\n                        {editingUser ? \"ACTUALIZAR\" : \"CREAR\"}\n                      </Button>\n                    </DialogFooter>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              {usersLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"font-mono\">Cargando usuarios...</div>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"font-mono\">USUARIO</TableHead>\n                      <TableHead className=\"font-mono\">EMAIL</TableHead>\n                      <TableHead className=\"font-mono\">ROL</TableHead>\n                      <TableHead className=\"font-mono\">ESTADO</TableHead>\n                      <TableHead className=\"font-mono\">DIRECCIÃN IP</TableHead>\n                      <TableHead className=\"font-mono\">DISPOSITIVO</TableHead>\n                      <TableHead className=\"font-mono\">ÃLTIMO ACCESO</TableHead>\n                      <TableHead className=\"font-mono\">ACCIONES</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredUsers.map((user: User) => (\n                      <TableRow key={user.id}>\n                        <TableCell className=\"font-mono\">{user.username}</TableCell>\n                        <TableCell className=\"font-mono\">{user.email}</TableCell>\n                        <TableCell>\n                          <Badge variant={getRoleBadgeVariant(user.role)} className=\"font-mono\">\n                            {getRoleLabel(user.role)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={getEstadoBadgeVariant(user.isActive)} className=\"font-mono\">\n                            {user.isActive === \"true\" ? (\n                              <UserCheck className=\"w-3 h-3 mr-1\" />\n                            ) : (\n                              <Shield className=\"w-3 h-3 mr-1\" />\n                            )}\n                            {user.isActive === \"true\" ? \"Activo\" : \"Inactivo\"}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"font-mono\">\n                          <div className=\"flex items-center gap-1\">\n                            <MapPin className=\"w-3 h-3\" />\n                            {user.currentSession?.ipAddress || \"No disponible\"}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"font-mono\">\n                          {user.currentSession?.deviceInfo || \"No disponible\"}\n                        </TableCell>\n                        <TableCell className=\"font-mono\">\n                          {user.lastLoginAt ? formatDateTime(user.lastLoginAt) : \"Nunca\"}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(user)}\n                              className=\"font-mono\"\n                              data-testid={`button-edit-user-${user.id}`}\n                            >\n                              <Edit className=\"w-3 h-3\" />\n                            </Button>\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(user.id)}\n                              className=\"font-mono\"\n                              data-testid={`button-delete-user-${user.id}`}\n                            >\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"sessions\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"font-mono flex items-center gap-2\">\n                <Monitor className=\"w-5 h-5\" />\n                SESIONES ACTIVAS\n              </CardTitle>\n              <CardDescription>\n                Monitorea las sesiones activas con informaciÃ³n de dispositivos e IP\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {sessionsLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"font-mono\">Cargando sesiones...</div>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"font-mono\">USUARIO</TableHead>\n                      <TableHead className=\"font-mono\">DIRECCIÃN IP</TableHead>\n                      <TableHead className=\"font-mono\">DISPOSITIVO</TableHead>\n                      <TableHead className=\"font-mono\">SISTEMA</TableHead>\n                      <TableHead className=\"font-mono\">INICIO SESIÃN</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {sessions.map((session: UserSession) => (\n                      <TableRow key={session.id}>\n                        <TableCell className=\"font-mono\">\n                          {session.user ? session.user.username : 'Usuario desconocido'}\n                        </TableCell>\n                        <TableCell className=\"font-mono\">\n                          <div className=\"flex items-center gap-1\">\n                            <MapPin className=\"w-3 h-3\" />\n                            {session.ipAddress}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"font-mono\">{session.deviceInfo}</TableCell>\n                        <TableCell className=\"font-mono\">{session.os}</TableCell>\n                        <TableCell className=\"font-mono\">\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"w-3 h-3\" />\n                            {formatDateTime(session.loginAt)}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                    {sessions.length === 0 && (\n                      <TableRow>\n                        <TableCell colSpan={7} className=\"text-center py-8 font-mono\">\n                          No hay sesiones activas\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":22573},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryCache.ts":{"content":"// Query cache optimization utilities\nimport { QueryKey, useQueryClient } from \"@tanstack/react-query\";\n\nexport const CACHE_TIMES = {\n  CYBER_CASES: 5 * 60 * 1000, // 5 minutes\n  DASHBOARD_STATS: 10 * 60 * 1000, // 10 minutes\n  USER_DATA: 30 * 60 * 1000, // 30 minutes\n};\n\nexport const QUERY_KEYS = {\n  CYBER_CASES: \"/api/cyber-cases\",\n  DASHBOARD_STATS: \"/api/dashboard/stats\",\n  USER_DATA: \"/api/auth/user\",\n} as const;\n\n// Pre-fetch next page for better UX\nexport const usePrefetchNextPage = () => {\n  const queryClient = useQueryClient();\n  \n  return (currentPage: number, filters: any) => {\n    const nextPage = currentPage + 1;\n    const queryKey = [QUERY_KEYS.CYBER_CASES, nextPage, 20, ...Object.values(filters)];\n    \n    queryClient.prefetchQuery({\n      queryKey,\n      queryFn: async () => {\n        const params = new URLSearchParams({\n          page: nextPage.toString(),\n          limit: \"20\",\n          ...filters\n        });\n        \n        const response = await fetch(`/api/cyber-cases?${params}`);\n        if (!response.ok) throw new Error('Failed to fetch cases');\n        return response.json();\n      },\n      staleTime: CACHE_TIMES.CYBER_CASES,\n    });\n  };\n};\n\n// Optimistic updates for better UX\nexport const useOptimisticCaseUpdate = () => {\n  const queryClient = useQueryClient();\n  \n  return {\n    onCreate: (newCase: any) => {\n      queryClient.setQueryData([QUERY_KEYS.CYBER_CASES], (old: any) => {\n        if (!old) return old;\n        return {\n          ...old,\n          cases: [newCase, ...old.cases],\n          total: old.total + 1,\n        };\n      });\n    },\n    \n    onUpdate: (updatedCase: any) => {\n      queryClient.setQueryData([QUERY_KEYS.CYBER_CASES], (old: any) => {\n        if (!old) return old;\n        return {\n          ...old,\n          cases: old.cases.map((c: any) => c.id === updatedCase.id ? updatedCase : c),\n        };\n      });\n    },\n    \n    onDelete: (deletedId: string) => {\n      queryClient.setQueryData([QUERY_KEYS.CYBER_CASES], (old: any) => {\n        if (!old) return old;\n        return {\n          ...old,\n          cases: old.cases.filter((c: any) => c.id !== deletedId),\n          total: old.total - 1,\n        };\n      });\n    },\n  };\n};","size_bytes":2210},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    let url: string;\n    if (queryKey.length === 1) {\n      url = queryKey[0] as string;\n    } else {\n      const [baseUrl, params] = queryKey as [string, any];\n      if (params && typeof params === 'object') {\n        const searchParams = new URLSearchParams();\n        Object.keys(params).forEach(key => {\n          const value = params[key];\n          if (value !== undefined && value !== null && value !== '') {\n            searchParams.append(key, String(value));\n          }\n        });\n        const queryString = searchParams.toString();\n        url = queryString ? `${baseUrl}?${queryString}` : baseUrl;\n      } else {\n        url = queryKey.join(\"/\");\n      }\n    }\n    \n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2039},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/chatbot.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Send, Bot, User, MessageCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Message {\n  id: string;\n  content: string;\n  isUser: boolean;\n  timestamp: Date;\n}\n\nexport function Chatbot() {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"welcome\",\n      content: \"Â¡Hola! Soy tu asistente especializado en delitos informÃ¡ticos. Puedo ayudarte con informaciÃ³n sobre investigaciones, tÃ©cnicas de anÃ¡lisis, normativas legales y mÃ¡s. Â¿En quÃ© puedo asistirte?\",\n      isUser: false,\n      timestamp: new Date(),\n    }\n  ]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  const scrollToBottom = () => {\n    if (scrollAreaRef.current) {\n      const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');\n      if (scrollContainer) {\n        scrollContainer.scrollTop = scrollContainer.scrollHeight;\n      }\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content: inputValue,\n      isUser: true,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue(\"\");\n    setIsLoading(true);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/chatbot/message\", { message: inputValue });\n\n      if (response.ok) {\n        const data = await response.json();\n        \n        const botMessage: Message = {\n          id: (Date.now() + 1).toString(),\n          content: data.response || \"Lo siento, no pude procesar tu mensaje. Intenta de nuevo.\",\n          isUser: false,\n          timestamp: new Date(),\n        };\n\n        setMessages(prev => [...prev, botMessage]);\n      } else {\n        throw new Error(\"Error en la comunicaciÃ³n\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Error al enviar el mensaje. Intenta de nuevo.\",\n        variant: \"destructive\",\n      });\n      \n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: \"Lo siento, hay un problema de conexiÃ³n. Por favor intenta de nuevo mÃ¡s tarde.\",\n        isUser: false,\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const formatTimestamp = (date: Date) => {\n    return date.toLocaleTimeString('es-ES', { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto h-[calc(100vh-2rem)]\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-3xl font-bold text-gray-800 mb-2 flex items-center\">\n          <MessageCircle className=\"w-8 h-8 mr-3 text-green-600\" />\n          Asistente Virtual\n        </h2>\n        <p className=\"text-gray-600\">\n          Especializado en delitos informÃ¡ticos y ciberseguridad\n        </p>\n      </div>\n\n      <Card className=\"h-[calc(100%-8rem)] flex flex-col\">\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center text-lg\">\n            <Bot className=\"w-5 h-5 mr-2 text-green-600\" />\n            Chat de Consultas\n          </CardTitle>\n        </CardHeader>\n        \n        <CardContent className=\"flex-1 flex flex-col p-0\">\n          {/* Ãrea de mensajes */}\n          <ScrollArea ref={scrollAreaRef} className=\"flex-1 px-6\">\n            <div className=\"space-y-4 pb-4\">\n              {messages.map((message) => (\n                <div\n                  key={message.id}\n                  className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}\n                >\n                  <div\n                    className={`flex max-w-[80%] ${\n                      message.isUser ? 'flex-row-reverse' : 'flex-row'\n                    }`}\n                  >\n                    {/* Avatar */}\n                    <div\n                      className={`w-8 h-8 rounded-full flex items-center justify-center shrink-0 ${\n                        message.isUser\n                          ? 'bg-blue-600 ml-3'\n                          : 'bg-green-600 mr-3'\n                      }`}\n                    >\n                      {message.isUser ? (\n                        <User className=\"w-4 h-4 text-white\" />\n                      ) : (\n                        <Bot className=\"w-4 h-4 text-white\" />\n                      )}\n                    </div>\n\n                    {/* Mensaje */}\n                    <div\n                      className={`rounded-lg px-4 py-3 ${\n                        message.isUser\n                          ? 'bg-blue-600 text-white'\n                          : 'bg-gray-100 text-gray-800'\n                      }`}\n                    >\n                      <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">\n                        {message.content}\n                      </p>\n                      <p\n                        className={`text-xs mt-2 ${\n                          message.isUser ? 'text-blue-100' : 'text-gray-500'\n                        }`}\n                      >\n                        {formatTimestamp(message.timestamp)}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n\n              {/* Indicador de escritura */}\n              {isLoading && (\n                <div className=\"flex justify-start\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 h-8 rounded-full bg-green-600 flex items-center justify-center mr-3\">\n                      <Bot className=\"w-4 h-4 text-white\" />\n                    </div>\n                    <div className=\"bg-gray-100 rounded-lg px-4 py-3\">\n                      <div className=\"flex space-x-1\">\n                        <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                        <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                        <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n\n          {/* Ãrea de entrada */}\n          <div className=\"border-t border-gray-200 p-4\">\n            <div className=\"flex gap-3\">\n              <Input\n                data-testid=\"input-chat-message\"\n                placeholder=\"Escribe tu consulta sobre delitos informÃ¡ticos...\"\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                onKeyPress={handleKeyPress}\n                disabled={isLoading}\n                className=\"flex-1\"\n              />\n              <Button\n                data-testid=\"button-send-message\"\n                onClick={handleSendMessage}\n                disabled={isLoading || !inputValue.trim()}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">\n              Presiona Enter para enviar â¢ Shift+Enter para nueva lÃ­nea\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8098},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Layout } from \"@/components/Layout\";\nimport { Dashboard } from \"@/components/Dashboard\";\nimport { DataManagementFast as DataManagement } from \"@/components/DataManagementFast\";\nimport { Settings } from \"@/components/Settings\";\nimport { Chatbot } from \"@/pages/chatbot\";\nimport { Intelligence } from \"@/pages/intelligence\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/hooks/useTheme\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Home() {\n  const [currentSection, setCurrentSection] = useState(\"dashboard\");\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  \n  // Load user theme settings when authenticated\n  useTheme();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return null; // Will redirect to login\n  }\n\n  const renderSection = () => {\n    switch (currentSection) {\n      case \"dashboard\":\n        return <Dashboard />;\n      case \"data-management\":\n        return <DataManagement />;\n      case \"chatbot\":\n        return <Chatbot />;\n      case \"intelligence\":\n        return <Intelligence />;\n      case \"settings\":\n        return <Settings />;\n      default:\n        return <Dashboard />;\n    }\n  };\n\n  return (\n    <Layout\n      currentSection={currentSection}\n      onSectionChange={setCurrentSection}\n    >\n      {renderSection()}\n    </Layout>\n  );\n}\n","size_bytes":1768},"client/src/pages/intelligence.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Globe, ExternalLink, FileDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface SearchResult {\n  title: string;\n  url: string;\n  description: string;\n  citations?: string[];\n}\n\nexport function Intelligence() {\n  const [query, setQuery] = useState(\"\");\n  const [searchMode, setSearchMode] = useState(\"web\");\n  const [isSearching, setIsSearching] = useState(false);\n  const [results, setResults] = useState<SearchResult[]>([]);\n  const { toast } = useToast();\n\n  const handleSearch = async () => {\n    if (!query.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Por favor ingresa un tÃ©rmino de bÃºsqueda\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSearching(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/intelligence/search\", { query, mode: searchMode });\n\n      if (response.ok) {\n        const data = await response.json();\n        setResults(data.results || []);\n        \n        if (data.results.length === 0) {\n          toast({\n            title: \"Sin resultados\",\n            description: \"No se encontraron resultados para tu bÃºsqueda\",\n          });\n        }\n      } else {\n        throw new Error(\"Error en la bÃºsqueda\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Error al realizar la bÃºsqueda. Intenta de nuevo.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleSearch();\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n\n      {/* Buscador */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Search className=\"w-5 h-5 mr-2\" />\n            BÃºsqueda de Inteligencia\n          </CardTitle>\n          <CardDescription>\n            Ingresa tÃ©rminos relacionados con tu investigaciÃ³n\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-3\">\n            <Input\n              data-testid=\"input-search-query\"\n              placeholder=\"Ej: tÃ©cnicas de phishing, malware bancario, criptomonedas...\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              onKeyPress={handleKeyPress}\n              className=\"flex-1\"\n            />\n            <Select value={searchMode} onValueChange={setSearchMode}>\n              <SelectTrigger data-testid=\"select-search-mode\" className=\"w-40\">\n                <SelectValue placeholder=\"Modo\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"go-search\">Go-Search</SelectItem>\n                <SelectItem value=\"web\">Web</SelectItem>\n                <SelectItem value=\"ip-ser\">IP-SER</SelectItem>\n                <SelectItem value=\"social-red\">Social-RED</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button \n              data-testid=\"button-search\"\n              onClick={handleSearch} \n              disabled={isSearching}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              {isSearching ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Buscando...\n                </>\n              ) : (\n                <>\n                  <Search className=\"w-4 h-4 mr-2\" />\n                  Buscar\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Resultados */}\n      {results.length > 0 && (\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-xl font-semibold text-gray-800\">\n              Resultados de bÃºsqueda ({results.length})\n            </h3>\n            <Button \n              data-testid=\"button-export-results\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                // LÃ³gica de exportaciÃ³n\n                const exportData = {\n                  query,\n                  searchMode,\n                  results,\n                  timestamp: new Date().toISOString()\n                };\n                const dataStr = JSON.stringify(exportData, null, 2);\n                const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n                const exportFileDefaultName = `busqueda_inteligencia_${new Date().toISOString().split('T')[0]}.json`;\n                const linkElement = document.createElement('a');\n                linkElement.setAttribute('href', dataUri);\n                linkElement.setAttribute('download', exportFileDefaultName);\n                linkElement.click();\n              }}\n              className=\"flex items-center gap-2\"\n            >\n              <FileDown className=\"w-4 h-4\" />\n              Exportar InformaciÃ³n\n            </Button>\n          </div>\n          \n          {results.map((result, index) => (\n            <Card key={index} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <h4 className=\"text-lg font-semibold text-blue-700 mb-2\">\n                      {result.title}\n                    </h4>\n                    <p className=\"text-gray-600 mb-3 leading-relaxed\">\n                      {result.description}\n                    </p>\n                    <div className=\"flex items-center text-sm text-gray-500\">\n                      <Globe className=\"w-4 h-4 mr-1\" />\n                      <span className=\"truncate\">{result.url}</span>\n                    </div>\n                  </div>\n                  <Button\n                    data-testid={`button-open-result-${index}`}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => window.open(result.url, '_blank')}\n                    className=\"ml-4 shrink-0\"\n                  >\n                    <ExternalLink className=\"w-4 h-4 mr-1\" />\n                    Abrir\n                  </Button>\n                </div>\n                \n                {result.citations && result.citations.length > 0 && (\n                  <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                    <h5 className=\"text-sm font-medium text-gray-700 mb-2\">Fuentes:</h5>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {result.citations.slice(0, 3).map((citation, idx) => (\n                        <span \n                          key={idx}\n                          className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded truncate max-w-xs\"\n                        >\n                          {citation}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Estado vacÃ­o */}\n      {results.length === 0 && !isSearching && (\n        <Card className=\"text-center py-12\">\n          <CardContent>\n            <Search className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-700 mb-2\">\n              Realiza una bÃºsqueda\n            </h3>\n            <p className=\"text-gray-500\">\n              Usa el buscador de arriba para encontrar informaciÃ³n relevante para tus investigaciones\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":8126},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Shield } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Landing() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (response.ok) {\n        window.location.reload();\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Credenciales incorrectas\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Error de conexiÃ³n\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary to-blue-800 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-primary rounded-full flex items-center justify-center mb-4\">\n            <Shield className=\"text-white text-2xl\" size={32} />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-800\">Sistema CyberCrime</CardTitle>\n          <CardDescription>Acceso al sistema de delitos informÃ¡ticos</CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"username\">Usuario</Label>\n              <Input\n                id=\"username\"\n                data-testid=\"input-username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                placeholder=\"Ingrese su usuario\"\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"password\">ContraseÃ±a</Label>\n              <Input\n                id=\"password\"\n                data-testid=\"input-password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Ingrese su contraseÃ±a\"\n                required\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              data-testid=\"button-login\"\n              className=\"w-full\"\n              size=\"lg\"\n              disabled={isLoading}\n            >\n              {isLoading ? \"Iniciando sesiÃ³n...\" : \"Iniciar SesiÃ³n\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Sistema seguro de gestiÃ³n de delitos informÃ¡ticos\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3413},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298},"client/src/hooks/useTheme.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport interface ThemeSettings {\n  primaryColor: string;\n  secondaryColor: string;\n  transparency: number;\n  neonEffects: boolean;\n  fontSize: number;\n  animations: boolean;\n}\n\nexport const useTheme = () => {\n  const [initialLoad, setInitialLoad] = useState(true);\n\n  // Fetch user settings from database\n  const { data: userSettings, isLoading } = useQuery({\n    queryKey: [\"/api/user/settings\"],\n  });\n\n  const [settings, setSettings] = useState<ThemeSettings>({\n    primaryColor: \"green\",\n    secondaryColor: \"gray\",\n    transparency: 85,\n    neonEffects: false,\n    fontSize: 14,\n    animations: false,\n  });\n\n  // Apply theme changes to CSS variables\n  const applyThemeChanges = (newSettings: ThemeSettings) => {\n    const root = document.documentElement;\n    \n    // Primary color mappings\n    const primaryColorMap: Record<string, { primary: string; primaryForeground: string; accent: string; ring: string }> = {\n      green: { primary: \"120 100% 45%\", primaryForeground: \"0 0% 0%\", accent: \"120 100% 50%\", ring: \"120 100% 45%\" },\n      blue: { primary: \"200 100% 45%\", primaryForeground: \"0 0% 0%\", accent: \"200 100% 50%\", ring: \"200 100% 45%\" },\n      purple: { primary: \"280 100% 45%\", primaryForeground: \"0 0% 0%\", accent: \"280 100% 50%\", ring: \"280 100% 45%\" },\n      red: { primary: \"0 100% 45%\", primaryForeground: \"0 0% 0%\", accent: \"0 100% 50%\", ring: \"0 100% 45%\" },\n      orange: { primary: \"30 100% 45%\", primaryForeground: \"0 0% 0%\", accent: \"30 100% 50%\", ring: \"30 100% 45%\" },\n    };\n\n    // Secondary color mappings\n    const secondaryColorMap: Record<string, { secondary: string; secondaryForeground: string }> = {\n      gray: { secondary: \"0 0% 15%\", secondaryForeground: \"0 0% 98%\" },\n      slate: { secondary: \"210 40% 20%\", secondaryForeground: \"0 0% 98%\" },\n      zinc: { secondary: \"240 4% 20%\", secondaryForeground: \"0 0% 98%\" },\n      stone: { secondary: \"25 5% 20%\", secondaryForeground: \"0 0% 98%\" },\n      neutral: { secondary: \"0 0% 20%\", secondaryForeground: \"0 0% 98%\" },\n    };\n\n    const primaryColors = primaryColorMap[newSettings.primaryColor] || primaryColorMap.green;\n    const secondaryColors = secondaryColorMap[newSettings.secondaryColor] || secondaryColorMap.gray;\n    \n    // Apply colors\n    root.style.setProperty(\"--primary\", primaryColors.primary);\n    root.style.setProperty(\"--primary-foreground\", primaryColors.primaryForeground);\n    root.style.setProperty(\"--accent\", primaryColors.accent);\n    root.style.setProperty(\"--ring\", primaryColors.ring);\n    root.style.setProperty(\"--secondary\", secondaryColors.secondary);\n    root.style.setProperty(\"--secondary-foreground\", secondaryColors.secondaryForeground);\n    \n    // Apply transparency\n    root.style.setProperty(\"--card-opacity\", (newSettings.transparency / 100).toString());\n    root.style.setProperty(\"--modal-opacity\", (newSettings.transparency / 100).toString());\n    \n    // Apply font size\n    root.style.fontSize = `${newSettings.fontSize}px`;\n    \n    // Handle effects\n    if (newSettings.neonEffects) {\n      root.classList.add(\"neon-enabled\");\n    } else {\n      root.classList.remove(\"neon-enabled\");\n    }\n    \n    if (newSettings.animations) {\n      root.classList.add(\"animations-enabled\");\n    } else {\n      root.classList.remove(\"animations-enabled\");\n    }\n  };\n\n  // Update local state when data is loaded - only on first load\n  useEffect(() => {\n    if (userSettings && typeof userSettings === 'object' && initialLoad) {\n      const newSettings = {\n        primaryColor: (userSettings as any).primaryColor || \"green\",\n        secondaryColor: (userSettings as any).secondaryColor || \"gray\",\n        transparency: parseInt((userSettings as any).transparency) || 85,\n        neonEffects: (userSettings as any).neonEffects === \"true\",\n        fontSize: parseInt((userSettings as any).fontSize) || 14,\n        animations: (userSettings as any).animations === \"true\",\n      };\n      setSettings(newSettings);\n      applyThemeChanges(newSettings);\n      setInitialLoad(false);\n    }\n  }, [userSettings, initialLoad]);\n\n  return {\n    settings,\n    isLoading,\n    applyThemeChanges,\n    setSettings,\n  };\n};","size_bytes":4231}}}